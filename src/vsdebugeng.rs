//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#![allow(non_snake_case)]
#![allow(non_camel_case_types)]

type IUnknownVtbl = ::windows::core::IUnknownVtbl;
type GUID = ::windows::core::GUID;
type HRESULT = ::windows::core::HRESULT;

#[repr(C)]
pub struct DkmString {
    VTable: *const crate::IUnknownVtbl,
    Length: u32,
    Value: *const u16,
}

#[repr(C)]
pub struct DkmReadOnlyCollection<T> {
    VTable: *const crate::IUnknownVtbl,
    ReferenceCount: isize,
    Count: u32,
    ReleaseElement: *const std::ffi::c_void,
    Items: *mut T
}

#[repr(C)]
struct NativeXapiDispatcherObjectBase {
    VTable: *const crate::IUnknownVtbl,
    Count: i32,
    Flags: i32,
    TypeId: *const crate::GUID,
    ObjectGcHandle: *const std::ffi::c_void,
}

#[repr(C)]
struct NativeXapiDataContainer {
    NativeBase: crate::NativeXapiDispatcherObjectBase,
    DataContainerMap: *const std::ffi::c_void,
    Creator: *const std::ffi::c_void,
    CreateEventPositition: *const std::ffi::c_void,
    Lock: crate::NativeCriticalSection,
}

#[repr(C)]
struct NativeCriticalSection {
    DebugInfo: *const std::ffi::c_void,
    LockCount: i32,
    RecursionCount: i32,
    OwningThread: *const std::ffi::c_void,
    LockSemaphore: *const std::ffi::c_void,
    SpinCount: *const std::ffi::c_void,
}

#[repr(u32)]
pub enum DkmApiVersion {

    VS11RTM = 0xB000001,
    VS11FeaturePack1 = 0xB000002,
    VS11Update2 = 0xB000003,
    VS12RTM = 0xC000000,
    VS12Update2 = 0xC000001,
    VS12Update3 = 0xC000003,
    VS14RTM = 0xE000003,
    VS14Win10Tools1Dot1 = 0xE000004,
    VS14Update1 = 0xE000006,
    VS14Update2 = 0xE000007,
    VS14Update3 = 0xE000008,
    VS14Update3MicroUpdate = 0xE000009,
    VS15RTM = 0xF000000,
    VS15Update1 = 0xF000001,
    VS15Update2 = 0xF020000,
    VS15Update3 = 0xF030000,
    VS15Update4 = 0xF040000,
    VS15Update5 = 0xF050000,
    VS15Update6 = 0xF060000,
    VS15Update7 = 0xF070000,
    VS15Update8 = 0xF080000,
    VS15Update9 = 0xF090000,
    VS16RTMPreview = 0x10000000,
    VS16RTM = 0x10000001,
    VS16Update1 = 0x10010000,
    VS16Update2 = 0x10020000,
    VS16Update3 = 0x10030000,
    VS16Update4 = 0x10040000,
    VS16Update5 = 0x10050000,
    VS16Update6 = 0x10060000,
    VS16Update7 = 0x10070000,
    VS16Update8 = 0x10080000,
    VS16Update9 = 0x10090000,
    VS16Update10 = 0x100A0000,
    VS16Update11S2 = 0x100B0002,
    VS17RTMPreview1 = 0x11000000,
    VS17RTM = 0x11000001,
    VS17Update1 = 0x11010000,
    VS17Update2 = 0x11020000,
    VS17Update3 = 0x11030000,
    VS17Update4 = 0x11040000,
}

#[repr(u32)]
pub enum DkmAsyncBreakStatus {

    ActiveBreak = 0,
    FrozenBreak = 1,
    ImmediateBreak = 2,
}

#[repr(u32)]
pub enum DkmClientUI {

    Unknown = 0,
    VisualStudioAD7 = 1,
    VSCode = 2,
    VisualStudioForMac = 3,
    VisualStudioDAP = 4,
}

#[repr(C)]
struct NativeDkmCustomMessage____ExtendedData {

    pub Parameter3: *mut std::ffi::c_void,
    pub WorkerProcess: *mut std::ffi::c_void,
}

#[repr(C)]
struct NativeDkmCustomMessage {

    BaseClass: crate::NativeXapiDispatcherObjectBase,
    pub Connection: *mut std::ffi::c_void,
    pub Process: *mut std::ffi::c_void,
    pub SourceId: crate::GUID,
    pub MessageCode: u32,
    pub Parameter1: *mut std::ffi::c_void,
    pub Parameter2: *mut std::ffi::c_void,
    ExtendedData: *const std::ffi::c_void,
}

#[repr(u32)]
pub enum DkmDataCreationDisposition {

    CreateNew = 0,
    CreateAlways = 1,
}

#[repr(u32)]
pub enum DkmDispatcherObjectFlags {

    None = 0x0,
    ObjectAlive = 0x1,
    ObjectUnloaded = 0x2,
    LockInitialized = 0x4,
    RestrictVisibilityAboveCreationLevel = 0x8,
    RestrictVisibilityBelowCreationLevel = 0x10,
    RemoteMarshalled = 0x20,
}

#[repr(u32)]
pub enum DkmDumpType {

    Minidump = 0,
    MinidumpWithFullMemory = 1,
}

#[repr(u32)]
pub enum DkmEngineFlags {

    None = 0x0,
    NativeCodeSupported = 0x1,
    JustMyCodeSupported = 0x2,
}

#[repr(C)]
struct NativeDkmEngineSettings____ExtendedData {

    pub MaxCallStackFrames: u32,
    pub IsEditAndContinue: bool,
    pub ValidateFilesForMinidumps: bool,
    pub RegistryTweaks: *mut std::ffi::c_void,
    pub TraceSettings: *mut std::ffi::c_void,
    pub FuncEvalAbortLoggingLevel: crate::DkmFuncEvalAbortLoggingFlags,
    pub IsNativeJustMyCodeSteppingEnabled: bool,
    pub AllowOutOfProcessSymbolLoading: bool,
    pub DataBreakpointAsString: bool,
    pub IsFastEvaluateAllowed: bool,
}

#[repr(C)]
struct NativeDkmEngineSettings {

    BaseClass: crate::NativeXapiDataContainer,
    pub EngineId: crate::GUID,
    pub Flags: crate::DkmEngineFlags,
    pub ClrDebuggingServicesId: crate::Clr::DkmClrDebuggingServicesId,
    pub Languages: *mut std::ffi::c_void,
    pub ImageDebugDirectoryFormats: *mut std::ffi::c_void,
    pub EnableFuncEvalQuickAbort: bool,
    pub FuncEvalQuickAbortExcludeList: *mut std::ffi::c_void,
    pub EnableAsyncDebugging: bool,
    pub RemoteClrPdbNamePatterns: *mut std::ffi::c_void,
    pub BaseDebugMonitorId: crate::GUID,
    pub IsJustMyCodeEnabled: bool,
    pub SymbolPaths: *mut std::ffi::c_void,
    pub IsSuppressOptimizationsEnabled: bool,
    pub IsStepOverPropertiesAndOperatorsEnabled: bool,
    pub IsNativeExportsEnabled: bool,
    pub IsGpuRaceHazardsAllowSameSettingEnabled: bool,
    pub RequireFullTrustForSourceServer: bool,
    ExtendedData: *const std::ffi::c_void,
}

#[repr(u32)]
pub enum DkmEventCode {

    AsyncBreakComplete = 0,
    BoundBreakpointHit = 1,
    ComputeKernelExit = 2,
    CustomStop = 3,
    DebugMonitorException = 4,
    EmbeddedBreakpointHit = 5,
    EntryPoint = 6,
    ExceptionContinued = 7,
    ExceptionTriggerHit = 8,
    FuncEvalCompleted = 9,
    FuncEvalStarting = 10,
    GPUSingleStepComplete = 11,
    InterceptExceptionCompleted = 12,
    LoadComplete = 13,
    ModuleCreate = 14,
    ModuleInstanceLoad = 15,
    ModuleInstanceUnload = 16,
    ModuleSymbolsLoaded = 17,
    ModuleSymbolsUpdated = 18,
    ProcessCreate = 19,
    ProcessExit = 20,
    ReturnValues = 21,
    RuntimeBreakpoint = 22,
    RuntimeInstanceLoad = 23,
    RuntimeInstanceUnload = 24,
    ScriptDocumentContentInsert = 25,
    ScriptDocumentContentRemove = 26,
    ScriptDocumentTreeNodeCreate = 27,
    ScriptDocumentTreeNodeUnload = 28,
    ScriptSymbolsUpdated = 29,
    SingleStepComplete = 30,
    StepComplete = 31,
    TaskProviderCreate = 32,
    ThreadCreate = 33,
    ThreadExit = 34,
    OutOfBandException = 35,
    BinaryLoaded = 36,
    ClrDebugMonitorExceptionCaught = 37,
    BinaryReloadOpportunity = 38,
    RuntimeInstanceLoadComplete = 39,
    HiddenEntryPoint = 40,
    ThreadNameChange = 41,
    ProcessSnapshotAdded = 42,
    ProcessSnapshotRemoved = 43,
    AppDomainCreated = 44,
    AppDomainUnloaded = 45,
    BreakpointHitWithError = 46,
    DataBreakpointHit = 47,
    RecordedProcessQueryUpdated = 48,
    RuntimeBreakpointHitWithError = 49,
    RuntimeDataBreakpointHit = 50,
    TraceTimeContextSet = 51,
    RuntimeBreakpointConditionFailed = 52,
    ModuleSymbolsReplaced = 53,
    VirtualThreadCreate = 54,
    NonDebugProcessExit = 55,
}

#[repr(u32)]
pub enum DkmFuncEvalAbortLoggingFlags {

    None = 0,
    FullDumpOnAbort = 1,
    FullDumpOnRudeAbort = 2,
    MiniDumpOnAbort = 3,
    MiniDumpOnRudeAbort = 4,
}

#[repr(u32)]
pub enum DkmFuncEvalMode {

    NotEvaluating = 0,
    EvaluatingWithoutStoppingEvents = 1,
    EvaluatingWithStoppingEvents = 2,
}

#[repr(C)]
struct NativeDkmInstructionAddress_CPUInstruction {

    pub InstructionPointer: u64,
}

#[repr(u32)]
pub enum DkmInstructionAddress_Tag {

    NativeAddress = 0,
    ClrAddress = 1,
    ScriptAddress = 2,
    CustomAddress = 3,
    UnknownAddress = 4,
}

#[repr(C)]
struct NativeDkmInstructionAddress {

    BaseClass: crate::NativeXapiDispatcherObjectBase,
    pub CPUInstruction: *mut std::ffi::c_void,
    pub TagValue: crate::DkmInstructionAddress_Tag,
    pub RuntimeInstance: *mut std::ffi::c_void,
    pub ModuleInstance: *mut std::ffi::c_void,
    ExtendedData: *const std::ffi::c_void,
}

#[repr(C)]
struct NativeDkmLanguageRegistrySetting {

    BaseClass: crate::NativeXapiDispatcherObjectBase,
    pub Name: *mut std::ffi::c_void,
    pub Value: *mut std::ffi::c_void,
}

#[repr(u32)]
pub enum DkmMemoryTimeFlags {

    None = 0x0,
    IsPast = 0x1,
    IsFuture = 0x2,
    IsIncomplete = 0x4,
}

#[repr(u32)]
pub enum DkmModuleFlags {

    None = 0x0,
    FileBacked = 0x1,
    FileResolved = 0x2,
    MissingBinary = 0x4,
    Relocated = 0x8,
    Optimized = 0x10,
    Unoptimized = 0x20,
    Editable = 0x40,
    OpenEnclaveModule = 0x80,
    SymbolsUnavailable = 0x100,
}

#[repr(C)]
struct NativeDkmModuleInstance_MinidumpInfo {

    pub OriginalPath: *mut std::ffi::c_void,
}

#[repr(u32)]
pub enum DkmModuleInstance_Tag {

    NativeModuleInstance = 0,
    ClrModuleInstance = 1,
    CustomModuleInstance = 2,
    ClrNcContainerModuleInstance = 3,
}

#[repr(C)]
struct NativeDkmModuleInstance {

    BaseClass: crate::NativeXapiDataContainer,
    pub MinidumpInfo: *mut std::ffi::c_void,
    pub TagValue: crate::DkmModuleInstance_Tag,
    pub UniqueId: crate::GUID,
    pub Name: *mut std::ffi::c_void,
    pub FullName: *mut std::ffi::c_void,
    pub TimeDateStamp: u64,
    pub RuntimeInstance: *mut std::ffi::c_void,
    pub Version: *mut std::ffi::c_void,
    pub SymbolFileId: *mut std::ffi::c_void,
    pub Flags: crate::DkmModuleFlags,
    pub MemoryLayout: crate::DkmModuleMemoryLayout,
    pub BaseAddress: u64,
    pub LoadOrder: u32,
    pub Size: u32,
    pub LoadContext: *mut std::ffi::c_void,
    pub IsDisabled: bool,
    pub Module: *mut std::ffi::c_void,
    ExtendedData: *const std::ffi::c_void,
}

#[repr(u32)]
pub enum DkmModuleMemoryLayout {

    Unknown = 0,
    MemoryPE = 1,
    DiskPE = 2,
    MemoryELF = 3,
}

#[repr(C)]
struct NativeDkmModuleVersion {

    BaseClass: crate::NativeXapiDispatcherObjectBase,
    pub FileVersionString: *mut std::ffi::c_void,
    pub CompanyName: *mut std::ffi::c_void,
    pub FileVersionMS: u32,
    pub FileVersionLS: u32,
    pub ProductVersionMS: u32,
    pub ProductVersionLS: u32,
    pub VersionFlags: u32,
}

#[repr(C)]
struct NativeDkmPerformanceCounters {

    BaseClass: crate::NativeXapiDispatcherObjectBase,
    pub StartStopCounter: u32,
    pub SystemTime: u64,
    pub UserTime: u64,
    pub KernelTime: u64,
    pub RuntimeOverhead: u64,
    pub OSOverhead: u64,
    pub TotalOverhead: u64,
    pub Id: u64,
}

#[repr(C)]
struct NativeDkmProcess_Live {

    pub Id: u32,
    pub StartTime: u64,
}

#[repr(C)]
struct NativeDkmProcess____ExtendedData {

    pub IsAppPackage: bool,
    pub IsMultiArch: bool,
}

#[repr(C)]
struct NativeDkmProcess {

    BaseClass: crate::NativeXapiDataContainer,
    pub Live: *mut std::ffi::c_void,
    pub Connection: *mut std::ffi::c_void,
    pub Path: *mut std::ffi::c_void,
    pub UniqueId: crate::GUID,
    pub StartMethod: crate::Start::DkmStartMethod,
    pub EngineSettings: *mut std::ffi::c_void,
    pub DebugLaunchSettings: *mut std::ffi::c_void,
    pub SystemInformation: *mut std::ffi::c_void,
    pub BaseDebugMonitorId: crate::GUID,
    pub IsNativeDebuggingEnabled: bool,
    ExtendedData: *const std::ffi::c_void,
}

#[repr(u32)]
pub enum DkmProcessExecuteDirection {

    Forward = 0,
    Reverse = 1,
}

#[repr(C)]
struct NativeDkmProcessExecutionCounters {

    BaseClass: crate::NativeXapiDispatcherObjectBase,
    pub QueryPerformanceCounterTime: u64,
}

#[repr(C)]
struct NativeDkmProcessSnapshot {

    BaseClass: crate::NativeXapiDataContainer,
    pub Id: u32,
    pub ProcessId: u32,
    pub OriginalProcess: *mut std::ffi::c_void,
    pub TimeStamp: u64,
    pub StoppingThreadId: u32,
}

#[repr(u32)]
pub enum DkmReadMemoryFlags {

    None = 0x0,
    AllowPartialRead = 0x1,
    ExecutableOnly = 0x2,
    ReadGPUPointer = 0x4,
}

#[repr(C)]
struct NativeDkmRegistryTweak {

    BaseClass: crate::NativeXapiDispatcherObjectBase,
    pub ValueName: *mut std::ffi::c_void,
    pub Data: u32,
}

#[repr(u32)]
pub enum DkmRuntimeCapabilities {

    None = 0x0,
    AllowStackCaching = 0x1,
    PreventDetach = 0x2,
    SupportsJustMyCode = 0x4,
    ProhibitsStoppingInNonUserCode = 0x8,
    SupportsClrHeapInspection = 0x10,
}

#[repr(u32)]
pub enum DkmRuntimeInstance_Tag {

    NativeRuntimeInstance = 0,
    ClrRuntimeInstance = 1,
    ScriptRuntimeInstance = 2,
    CustomRuntimeInstance = 3,
    NativeDwarfRuntimeInstance = 4,
    OpenEnclaveRuntimeInstance = 5,
}

#[repr(C)]
struct NativeDkmRuntimeInstance____ExtendedData {

    pub Capabilities: crate::DkmRuntimeCapabilities,
    pub ParentRuntime: *mut std::ffi::c_void,
}

#[repr(C)]
struct NativeDkmRuntimeInstance {

    BaseClass: crate::NativeXapiDataContainer,
    pub TagValue: crate::DkmRuntimeInstance_Tag,
    pub Process: *mut std::ffi::c_void,
    pub Id: crate::DkmRuntimeInstanceId,
    ExtendedData: *const std::ffi::c_void,
    ContextGroupEvalResultCollection0: *const std::ffi::c_void,
    ModuleInstanceCollection0: *const std::ffi::c_void,
    RuntimeBreakpointCollection0: *const std::ffi::c_void,
    ScriptDocumentTreeNodeCollection0: *const std::ffi::c_void,
    TaskProviderCollection0: *const std::ffi::c_void,
}

#[repr(C)]
pub struct DkmRuntimeInstanceId {
    pub RuntimeType: crate::GUID,
    pub InstanceId: u64,
}

#[repr(u32)]
pub enum DkmStoppingEventProcessingNextAction {

    ResumeTarget = 0,
    SlipTarget = 1,
    ResumeUnclaimedThreads = 2,
    EnterStoppedState = 3,
    ForceQueueModeComplete = 4,
}

#[repr(C)]
struct NativeDkmThread_System {

    pub Id: u32,
}

#[repr(C)]
struct NativeDkmThread {

    BaseClass: crate::NativeXapiDataContainer,
    pub System: *mut std::ffi::c_void,
    pub UniqueId: crate::GUID,
    pub Process: *mut std::ffi::c_void,
    pub NativeStartAddress: u64,
    pub TebAddress: u64,
    pub IsMainThread: bool,
    ExtendedData: *const std::ffi::c_void,
    MonitorStackWalkContextCollection0: *const std::ffi::c_void,
    StackWalkContextCollection0: *const std::ffi::c_void,
    StepperCollection0: *const std::ffi::c_void,
}

#[repr(C)]
struct NativeDkmTraceTimeContext {

    BaseClass: crate::NativeXapiDispatcherObjectBase,
    pub UniqueId: *mut std::ffi::c_void,
    pub Process: *mut std::ffi::c_void,
    pub ApproximatePosition: f64,
}

#[repr(C)]
struct NativeDkmUnknownInstructionAddress {

    BaseClass: crate::DkmInstructionAddress,
}

#[repr(C)]
struct NativeDkmUserMessage____ExtendedData {

    pub TimeStamp: u64,
}

#[repr(C)]
struct NativeDkmUserMessage {

    BaseClass: crate::NativeXapiDispatcherObjectBase,
    pub Connection: *mut std::ffi::c_void,
    pub Process: *mut std::ffi::c_void,
    pub OutputKind: crate::DkmUserMessageOutputKind,
    pub MessageText: *mut std::ffi::c_void,
    pub MessageBoxFlags: u32,
    pub ErrorCode: crate::HRESULT,
    ExtendedData: *const std::ffi::c_void,
}

#[repr(u32)]
pub enum DkmUserMessageOutputKind {

    UnfilteredOutputWindowMessage = 0,
    ExceptionOutputWindowMessage = 1,
    ProgramOutput = 2,
    MessageBox = 3,
    JustMyCodePrompt = 4,
    StepFilterOutputWindowMessage = 5,
    StepFilterPrompt = 6,
    FatalError = 7,
    FatalOperationAbortOutputMessage = 8,
    NewDebuggerCompatibilityWarning = 9,
    UnfilteredOutputWindowWarning = 10,
    OutputWindowTruncation = 11,
    ProgramStandardOutput = 12,
}

#[repr(C)]
struct NativeDkmVirtualThread {

    BaseClass: crate::DkmThread,
}

#[repr(C)]
struct NativeDkmWaitUIOperation {

    BaseClass: crate::NativeXapiDataContainer,
    pub UniqueId: crate::GUID,
    pub SourceId: crate::GUID,
    pub Description: *mut std::ffi::c_void,
    pub Flags: crate::DkmWaitUIOperationFlags,
}

#[repr(u32)]
pub enum DkmWaitUIOperationFlags {

    None = 0x0,
    AllowNestedCancellation = 0x1,
}

pub mod Evaluation {

    #[repr(C)]
    struct NativeDkmChildVisualizedExpression {

        BaseClass: crate::Evaluation::DkmVisualizedExpression,
        pub EvaluationResult: *mut std::ffi::c_void,
        pub Parent: *mut std::ffi::c_void,
        pub Index: u32,
    }

    #[repr(u32)]
    pub enum DkmClrCustomVisualizerAssemblyLocation {

        Unknown = 0,
        UserDirectory = 1,
        SharedDirectory = 2,
        Debuggee = 3,
        Extension = 4,
    }

    #[repr(C)]
    struct NativeDkmClrObjectFavoritesInfo {

        BaseClass: crate::NativeXapiDispatcherObjectBase,
        pub Key: *mut std::ffi::c_void,
        pub DisplayString: *mut std::ffi::c_void,
        pub SimpleDisplayString: *mut std::ffi::c_void,
        pub Favorites: *mut std::ffi::c_void,
    }

    #[repr(u32)]
    pub enum DkmClrValueFlags {

        None = 0x0,
        Error = 0x1,
        Synthetic = 0x2,
        Void = 0x4,
    }

    #[repr(C)]
    struct NativeDkmCompiledCustomInspectionQuery {

        BaseClass: crate::Evaluation::DkmCompiledInspectionQuery,
        pub Instructions: *mut std::ffi::c_void,
    }

    #[repr(u32)]
    pub enum DkmCompiledInspectionQuery_Tag {

        DkmILQuery = 0,
        CustomQuery = 1,
        CompiledClrInspectionQuery = 2,
        CompiledClrLocalsQuery = 3,
    }

    #[repr(C)]
    struct NativeDkmCompiledInspectionQuery____ExtendedData {

        pub DataContainer: *mut std::ffi::c_void,
        pub LanguageId: crate::Evaluation::DkmCompilerId,
        pub SourceWorkerProcess: *mut std::ffi::c_void,
    }

    #[repr(C)]
    struct NativeDkmCompiledInspectionQuery {

        BaseClass: crate::NativeXapiDispatcherObjectBase,
        pub TagValue: crate::Evaluation::DkmCompiledInspectionQuery_Tag,
        pub RuntimeInstance: *mut std::ffi::c_void,
        pub QueryKind: crate::GUID,
        ExtendedData: *const std::ffi::c_void,
    }

    #[repr(C)]
    struct NativeDkmCompiledVisualizationData____ExtendedData {

        pub WorkerProcess: *mut std::ffi::c_void,
    }

    #[repr(C)]
    struct NativeDkmCompiledVisualizationData {

        BaseClass: crate::NativeXapiDataContainer,
        pub Language: *mut std::ffi::c_void,
        pub InspectionSession: *mut std::ffi::c_void,
        pub UniqueId: crate::GUID,
        ExtendedData: *const std::ffi::c_void,
    }

    #[repr(u32)]
    pub enum DkmCompiledVisualizationDataPriority {

        None = 0,
        Low = 1,
        High = 2,
        Exclusive = 3,
    }

    #[repr(C)]
    pub struct DkmCompilerId {
        pub VendorId: crate::GUID,
        pub LanguageId: crate::GUID,
    }

    #[repr(C)]
    struct NativeDkmCustomDataContainer {

        BaseClass: crate::NativeXapiDataContainer,
        pub UniqueId: crate::GUID,
        pub Process: *mut std::ffi::c_void,
    }

    #[repr(C)]
    struct NativeDkmCustomRawReturnValue {

        BaseClass: crate::Evaluation::DkmRawReturnValue,
        pub Value: *mut std::ffi::c_void,
    }

    #[repr(C)]
    struct NativeDkmCustomUIVisualizerInfo____ExtendedData {

        pub UISideVisualizerTypeName: *mut std::ffi::c_void,
        pub UISideVisualizerAssemblyName: *mut std::ffi::c_void,
        pub UISideVisualizerAssemblyLocation: crate::Evaluation::DkmClrCustomVisualizerAssemblyLocation,
        pub DebuggeeSideVisualizerTypeName: *mut std::ffi::c_void,
        pub DebuggeeSideVisualizerAssemblyName: *mut std::ffi::c_void,
    }

    #[repr(C)]
    struct NativeDkmCustomUIVisualizerInfo {

        BaseClass: crate::NativeXapiDispatcherObjectBase,
        pub Id: u32,
        pub MenuName: *mut std::ffi::c_void,
        pub Description: *mut std::ffi::c_void,
        pub Metric: *mut std::ffi::c_void,
        ExtendedData: *const std::ffi::c_void,
    }

    #[repr(C)]
    struct NativeDkmDataAddress {

        BaseClass: crate::NativeXapiDispatcherObjectBase,
        pub RuntimeInstance: *mut std::ffi::c_void,
        pub Value: u64,
        pub InstructionAddress: *mut std::ffi::c_void,
        ExtendedData: *const std::ffi::c_void,
    }

    #[repr(C)]
    pub struct DkmDataBreakpointInfo {
        pub Identifier: *mut std::ffi::c_void,
        pub Size: u32,
    }

    #[repr(u32)]
    pub enum DkmEvaluationFlags {

        None = 0x0,
        TreatAsExpression = 0x1,
        TreatFunctionAsAddress = 0x2,
        NoSideEffects = 0x4,
        NoFuncEval = 0x8,
        DesignTime = 0x10,
        AllowImplicitVariables = 0x20,
        ForceEvaluationNow = 0x40,
        ShowValueRaw = 0x80,
        ForceRealFuncEval = 0x100,
        HideNonPublicMembers = 0x200,
        NoToString = 0x400,
        NoFormatting = 0x800,
        NoRawView = 0x1000,
        NoQuotes = 0x2000,
        DynamicView = 0x4000,
        ResultsOnly = 0x8000,
        NoExpansion = 0x10000,
        EnableExtendedSideEffects = 0x20000,
        FilterToFavorites = 0x40000,
        UseSimpleDisplayString = 0x80000,
    }

    #[repr(u32)]
    pub enum DkmEvaluationResult_Tag {

        SuccessResult = 0,
        FailedResult = 1,
        IntermediateResult = 2,
    }

    #[repr(C)]
    struct NativeDkmEvaluationResult {

        BaseClass: crate::NativeXapiDataContainer,
        pub TagValue: crate::Evaluation::DkmEvaluationResult_Tag,
        pub InspectionContext: *mut std::ffi::c_void,
        pub StackFrame: *mut std::ffi::c_void,
        pub Name: *mut std::ffi::c_void,
        pub FullName: *mut std::ffi::c_void,
        pub UniqueId: crate::GUID,
        ExtendedData: *const std::ffi::c_void,
    }

    #[repr(u32)]
    pub enum DkmEvaluationResultAccessType {

        None = 0,
        Public = 1,
        Private = 2,
        Protected = 3,
        Final = 4,
        Internal = 5,
    }

    #[repr(u32)]
    pub enum DkmEvaluationResultCategory {

        Other = 0,
        Data = 1,
        Method = 2,
        Event = 3,
        Property = 4,
        Class = 5,
        Interface = 6,
        BaseClass = 7,
        InnerClass = 8,
        MostDerivedClass = 9,
    }

    #[repr(C)]
    struct NativeDkmEvaluationResultEnumContext {

        BaseClass: crate::NativeXapiDataContainer,
        pub Count: u32,
        pub StackFrame: *mut std::ffi::c_void,
        pub InspectionContext: *mut std::ffi::c_void,
        pub UniqueId: crate::GUID,
    }

    #[repr(u32)]
    pub enum DkmEvaluationResultFlags {

        None = 0x0,
        SideEffect = 0x1,
        Expandable = 0x2,
        Boolean = 0x4,
        BooleanTrue = 0x8,
        RawString = 0x10,
        Address = 0x20,
        ReadOnly = 0x40,
        ILInterpreter = 0x80,
        UnflushedSideEffects = 0x100,
        HasObjectId = 0x200,
        CanHaveObjectId = 0x400,
        CrossThreadDependency = 0x800,
        Invalid = 0x1000,
        Visualized = 0x2000,
        ExpandableError = 0x4000,
        ExceptionThrown = 0x8000,
        ReturnValue = 0x10000,
        IsBuiltInType = 0x20000,
        CanEvaluateNow = 0x40000,
        EnableExtendedSideEffectsUponRefresh = 0x80000,
        MemoryFuture = 0x100000,
        MemoryPast = 0x200000,
        MemoryGap = 0x400000,
        HasDataBreakpoint = 0x800000,
        CanFavorite = 0x1000000,
        IsFavorite = 0x2000000,
        HasFavorites = 0x4000000,
        IsObjectReplaceable = 0x8000000,
        ExpansionHasSideEffects = 0x10000000,
    }

    #[repr(u32)]
    pub enum DkmEvaluationResultStorageType {

        None = 0,
        Global = 1,
        Static = 2,
        Register = 3,
    }

    #[repr(u32)]
    pub enum DkmEvaluationResultTypeModifierFlags {

        None = 0x0,
        Virtual = 0x1,
        Constant = 0x2,
        Synchronized = 0x4,
        Volatile = 0x8,
    }

    #[repr(u32)]
    pub enum DkmExpressionValueHome_Tag {

        PointerValueHome = 0,
        FakeValueHome = 1,
    }

    #[repr(C)]
    struct NativeDkmExpressionValueHome {

        BaseClass: crate::NativeXapiDispatcherObjectBase,
        pub TagValue: crate::Evaluation::DkmExpressionValueHome_Tag,
        ExtendedData: *const std::ffi::c_void,
    }

    #[repr(C)]
    struct NativeDkmFailedEvaluationResult____ExtendedData {

        pub Type: *mut std::ffi::c_void,
        pub Category: crate::Evaluation::DkmEvaluationResultCategory,
    }

    #[repr(C)]
    struct NativeDkmFailedEvaluationResult {

        BaseClass: crate::Evaluation::DkmEvaluationResult,
        pub ErrorMessage: *mut std::ffi::c_void,
        pub Flags: crate::Evaluation::DkmEvaluationResultFlags,
        ExtendedData: *const std::ffi::c_void,
    }

    #[repr(C)]
    struct NativeDkmFakeValueHome {

        BaseClass: crate::Evaluation::DkmExpressionValueHome,
        pub Address: u64,
    }

    #[repr(C)]
    struct NativeDkmFramePseudoLocal____ExtendedData {

        pub HideByDefault: bool,
    }

    #[repr(C)]
    struct NativeDkmFramePseudoLocal {

        BaseClass: crate::NativeXapiDispatcherObjectBase,
        pub CompilerId: crate::Evaluation::DkmCompilerId,
        pub Name: *mut std::ffi::c_void,
        pub RuntimeInstance: *mut std::ffi::c_void,
        ExtendedData: *const std::ffi::c_void,
    }

    #[repr(u32)]
    pub enum DkmFuncEvalFlags {

        None = 0x0,
        AllowStoppingEvents = 0x1,
        RunAllThreads = 0x2,
    }

    #[repr(C)]
    struct NativeDkmILContext_ThreadOverride {

        pub ThreadId: u64,
    }

    #[repr(C)]
    struct NativeDkmILContext____ExtendedData {

        pub DataContainer: *mut std::ffi::c_void,
    }

    #[repr(C)]
    struct NativeDkmILContext {

        BaseClass: crate::NativeXapiDispatcherObjectBase,
        pub ThreadOverride: *mut std::ffi::c_void,
        pub StackFrame: *mut std::ffi::c_void,
        ExtendedData: *const std::ffi::c_void,
    }

    #[repr(C)]
    struct NativeDkmInspectionContext____ExtendedData {

        pub AdditionalVisualizationData: *mut std::ffi::c_void,
        pub AdditionalVisualizationDataPriority: crate::Evaluation::DkmCompiledVisualizationDataPriority,
        pub ReturnValues: *mut std::ffi::c_void,
        pub SymbolsConnection: *mut std::ffi::c_void,
    }

    #[repr(C)]
    struct NativeDkmInspectionContext {

        BaseClass: crate::NativeXapiDispatcherObjectBase,
        pub InspectionSession: *mut std::ffi::c_void,
        pub RuntimeInstance: *mut std::ffi::c_void,
        pub Thread: *mut std::ffi::c_void,
        pub Timeout: u32,
        pub EvaluationFlags: crate::Evaluation::DkmEvaluationFlags,
        pub FuncEvalFlags: crate::Evaluation::DkmFuncEvalFlags,
        pub Radix: u32,
        pub Language: *mut std::ffi::c_void,
        pub ReturnValue: *mut std::ffi::c_void,
        ExtendedData: *const std::ffi::c_void,
    }

    #[repr(C)]
    struct NativeDkmInspectionSession {

        BaseClass: crate::NativeXapiDataContainer,
        pub Process: *mut std::ffi::c_void,
        pub UniqueId: crate::GUID,
    }

    #[repr(C)]
    struct NativeDkmIntermediateEvaluationResult____ExtendedData {

        pub Category: crate::Evaluation::DkmEvaluationResultCategory,
        pub Access: crate::Evaluation::DkmEvaluationResultAccessType,
        pub Storage: crate::Evaluation::DkmEvaluationResultStorageType,
        pub TypeModifierFlags: crate::Evaluation::DkmEvaluationResultTypeModifierFlags,
    }

    #[repr(C)]
    struct NativeDkmIntermediateEvaluationResult {

        BaseClass: crate::Evaluation::DkmEvaluationResult,
        pub Expression: *mut std::ffi::c_void,
        pub IntermediateLanguage: *mut std::ffi::c_void,
        pub TargetRuntime: *mut std::ffi::c_void,
        ExtendedData: *const std::ffi::c_void,
    }

    #[repr(C)]
    struct NativeDkmLanguage {

        BaseClass: crate::NativeXapiDispatcherObjectBase,
        pub Name: *mut std::ffi::c_void,
        pub Id: crate::Evaluation::DkmCompilerId,
    }

    #[repr(C)]
    struct NativeDkmLanguageExpression {

        BaseClass: crate::NativeXapiDataContainer,
        pub Language: *mut std::ffi::c_void,
        pub CompilationFlags: crate::Evaluation::DkmEvaluationFlags,
        pub Text: *mut std::ffi::c_void,
        pub UniqueId: crate::GUID,
    }

    #[repr(C)]
    struct NativeDkmLanguageInstructionAddress {

        BaseClass: crate::NativeXapiDispatcherObjectBase,
        pub Language: *mut std::ffi::c_void,
        pub Address: *mut std::ffi::c_void,
    }

    #[repr(C)]
    struct NativeDkmNativeRawReturnValue {

        BaseClass: crate::Evaluation::DkmRawReturnValue,
        pub Registers: *mut std::ffi::c_void,
        pub Memory: *mut std::ffi::c_void,
    }

    #[repr(C)]
    struct NativeDkmNativeReturnValueRegister {

        BaseClass: crate::NativeXapiDispatcherObjectBase,
        pub Identifier: u32,
        pub Value: *mut std::ffi::c_void,
    }

    #[repr(C)]
    struct NativeDkmPointerValueHome {

        BaseClass: crate::Evaluation::DkmExpressionValueHome,
        pub Address: u64,
    }

    #[repr(C)]
    struct NativeDkmRawManagedReturnValue {

        BaseClass: crate::Evaluation::DkmRawReturnValue,
        pub Context: *mut std::ffi::c_void,
    }

    #[repr(u32)]
    pub enum DkmRawReturnValue_Tag {

        NativeRawReturnValue = 0,
        CustomRawReturnValue = 1,
        ManagedReturnValue = 2,
    }

    #[repr(C)]
    struct NativeDkmRawReturnValue {

        BaseClass: crate::NativeXapiDispatcherObjectBase,
        pub TagValue: crate::Evaluation::DkmRawReturnValue_Tag,
        pub ReturnFrom: *mut std::ffi::c_void,
        ExtendedData: *const std::ffi::c_void,
    }

    #[repr(C)]
    struct NativeDkmRawReturnValueContainer {

        BaseClass: crate::NativeXapiDataContainer,
        pub InspectionSession: *mut std::ffi::c_void,
        pub Id: u32,
        pub RawReturnValue: *mut std::ffi::c_void,
    }

    #[repr(C)]
    struct NativeDkmRootVisualizedExpression____ExtendedData {

        pub Type: *mut std::ffi::c_void,
    }

    #[repr(C)]
    struct NativeDkmRootVisualizedExpression {

        BaseClass: crate::Evaluation::DkmVisualizedExpression,
        pub Module: *mut std::ffi::c_void,
        pub Name: *mut std::ffi::c_void,
        pub FullName: *mut std::ffi::c_void,
        pub Flags: crate::Evaluation::DkmRootVisualizedExpressionFlags,
        pub ArrayLength: u32,
        ExtendedData: *const std::ffi::c_void,
    }

    #[repr(u32)]
    pub enum DkmRootVisualizedExpressionFlags {

        None = 0x1,
        IsPointer = 0x2,
        IsReference = 0x4,
        IsArray = 0x8,
    }

    #[repr(C)]
    struct NativeDkmSuccessEvaluationResult____ExtendedData {

        pub RefreshButtonText: *mut std::ffi::c_void,
    }

    #[repr(C)]
    struct NativeDkmSuccessEvaluationResult {

        BaseClass: crate::Evaluation::DkmEvaluationResult,
        pub Flags: crate::Evaluation::DkmEvaluationResultFlags,
        pub Value: *mut std::ffi::c_void,
        pub EditableValue: *mut std::ffi::c_void,
        pub Type: *mut std::ffi::c_void,
        pub Category: crate::Evaluation::DkmEvaluationResultCategory,
        pub Access: crate::Evaluation::DkmEvaluationResultAccessType,
        pub StorageType: crate::Evaluation::DkmEvaluationResultStorageType,
        pub TypeModifierFlags: crate::Evaluation::DkmEvaluationResultTypeModifierFlags,
        pub Address: *mut std::ffi::c_void,
        pub CustomUIVisualizers: *mut std::ffi::c_void,
        pub ExternalModules: *mut std::ffi::c_void,
        ExtendedData: *const std::ffi::c_void,
    }

    #[repr(u32)]
    pub enum DkmVariableInfoFlags {

        None = 0x0,
        Types = 0x1,
        TypeAliases = 0x2,
        Names = 0x4,
        FullNames = 0x8,
        Values = 0x10,
        HideTemplateArguments = 0x20,
    }

    #[repr(u32)]
    pub enum DkmVisualizedExpression_Tag {

        RootVisualizedExpression = 0,
        ChildVisualizedExpression = 1,
    }

    #[repr(C)]
    struct NativeDkmVisualizedExpression {

        BaseClass: crate::NativeXapiDataContainer,
        pub TagValue: crate::Evaluation::DkmVisualizedExpression_Tag,
        pub InspectionContext: *mut std::ffi::c_void,
        pub UniqueId: crate::GUID,
        pub VisualizerId: crate::GUID,
        pub SourceId: crate::GUID,
        pub StackFrame: *mut std::ffi::c_void,
        pub ValueHome: *mut std::ffi::c_void,
        ExtendedData: *const std::ffi::c_void,
    }

    pub mod ClrCompilation {

        #[repr(u32)]
        pub enum DkmClrCompilationResultFlags {

            None = 0x0,
            PotentialSideEffect = 0x1,
            ReadOnlyResult = 0x2,
            BoolResult = 0x4,
        }

        #[repr(C)]
        struct NativeDkmClrCustomTypeInfo____ExtendedData {

            pub OptionalCustomModifiers: *mut std::ffi::c_void,
            pub RequiredCustomModifiers: *mut std::ffi::c_void,
        }

        #[repr(C)]
        struct NativeDkmClrCustomTypeInfo {

            BaseClass: crate::NativeXapiDispatcherObjectBase,
            pub PayloadTypeId: crate::GUID,
            pub Payload: *mut std::ffi::c_void,
            ExtendedData: *const std::ffi::c_void,
        }

        #[repr(C)]
        struct NativeDkmClrDebuggerBrowsableAttribute {

            BaseClass: crate::Evaluation::ClrCompilation::DkmClrEvalAttribute,
            pub State: crate::Evaluation::ClrCompilation::DkmClrDebuggerBrowsableAttributeState,
        }

        #[repr(u32)]
        pub enum DkmClrDebuggerBrowsableAttributeState {

            Never = 0,
            Collapsed = 1,
            RootHidden = 2,
        }

        #[repr(C)]
        struct NativeDkmClrDebuggerDisplayAttribute {

            BaseClass: crate::Evaluation::ClrCompilation::DkmClrEvalAttribute,
            pub OriginatingAssemblyName: *mut std::ffi::c_void,
            pub OriginatingAssemblyPublicKeyToken: *mut std::ffi::c_void,
            pub Value: *mut std::ffi::c_void,
            pub Name: *mut std::ffi::c_void,
            pub TypeName: *mut std::ffi::c_void,
        }

        #[repr(C)]
        struct NativeDkmClrDebuggerTypeProxyAttribute {

            BaseClass: crate::Evaluation::ClrCompilation::DkmClrEvalAttribute,
            pub ProxyType: *mut std::ffi::c_void,
        }

        #[repr(C)]
        struct NativeDkmClrDebuggerVisualizerAttribute {

            BaseClass: crate::Evaluation::ClrCompilation::DkmClrEvalAttribute,
            pub UISideVisualizerTypeName: *mut std::ffi::c_void,
            pub UISideVisualizerAssemblyName: *mut std::ffi::c_void,
            pub UISideVisualizerAssemblyLocation: crate::Evaluation::DkmClrCustomVisualizerAssemblyLocation,
            pub DebuggeeSideVisualizerTypeName: *mut std::ffi::c_void,
            pub DebuggeeSideVisualizerAssemblyName: *mut std::ffi::c_void,
            pub VisualizerDescription: *mut std::ffi::c_void,
        }

        #[repr(u32)]
        pub enum DkmClrEvalAttribute_Tag {

            DebuggerBrowsableAttribute = 0,
            DebuggerDisplayAttribute = 1,
            DebuggerTypeProxyAttribute = 2,
            DebuggerVisualizerAttribute = 3,
        }

        #[repr(C)]
        struct NativeDkmClrEvalAttribute {

            BaseClass: crate::NativeXapiDispatcherObjectBase,
            pub TagValue: crate::Evaluation::ClrCompilation::DkmClrEvalAttribute_Tag,
            pub TargetType: *mut std::ffi::c_void,
            pub TargetMember: *mut std::ffi::c_void,
            ExtendedData: *const std::ffi::c_void,
        }

        #[repr(C)]
        struct NativeDkmClrLocalVariableInfo {

            BaseClass: crate::NativeXapiDispatcherObjectBase,
            pub VariableName: *mut std::ffi::c_void,
            pub FullName: *mut std::ffi::c_void,
            pub MethodName: *mut std::ffi::c_void,
            pub CompilationFlags: crate::Evaluation::ClrCompilation::DkmClrCompilationResultFlags,
            pub ResultCategory: crate::Evaluation::DkmEvaluationResultCategory,
            pub CustomTypeInfo: *mut std::ffi::c_void,
        }

        #[repr(C)]
        struct NativeDkmClrValue {

            BaseClass: crate::NativeXapiDataContainer,
            pub InspectionSession: *mut std::ffi::c_void,
            pub Language: *mut std::ffi::c_void,
            pub Type: *mut std::ffi::c_void,
            pub Category: crate::Evaluation::DkmEvaluationResultCategory,
            pub Access: crate::Evaluation::DkmEvaluationResultAccessType,
            pub StorageType: crate::Evaluation::DkmEvaluationResultStorageType,
            pub TypeModifierFlags: crate::Evaluation::DkmEvaluationResultTypeModifierFlags,
            pub IsNull: bool,
            pub HostObjectValue: *mut std::ffi::c_void,
            pub StackFrame: *mut std::ffi::c_void,
            pub EvalFlags: crate::Evaluation::DkmEvaluationResultFlags,
            pub ValueFlags: crate::Evaluation::DkmClrValueFlags,
            pub NativeComPointer: u64,
            pub Address: *mut std::ffi::c_void,
            pub Alias: *mut std::ffi::c_void,
            pub ArrayDimensions: *mut std::ffi::c_void,
            pub ArrayLowerBounds: *mut std::ffi::c_void,
            pub UniqueId: crate::GUID,
        }

        #[repr(C)]
        struct NativeDkmCompiledClrInspectionQuery {

            BaseClass: crate::Evaluation::DkmCompiledInspectionQuery,
            pub Binary: *mut std::ffi::c_void,
            pub TypeName: *mut std::ffi::c_void,
            pub MethodName: *mut std::ffi::c_void,
            pub FormatSpecifiers: *mut std::ffi::c_void,
            pub CompilationFlags: crate::Evaluation::ClrCompilation::DkmClrCompilationResultFlags,
            pub ResultCategory: crate::Evaluation::DkmEvaluationResultCategory,
            pub Access: crate::Evaluation::DkmEvaluationResultAccessType,
            pub StorageType: crate::Evaluation::DkmEvaluationResultStorageType,
            pub TypeModifierFlags: crate::Evaluation::DkmEvaluationResultTypeModifierFlags,
            pub CustomTypeInfo: *mut std::ffi::c_void,
            pub UniqueId: crate::GUID,
        }

        #[repr(C)]
        struct NativeDkmCompiledClrLocalsQuery {

            BaseClass: crate::Evaluation::DkmCompiledInspectionQuery,
            pub Binary: *mut std::ffi::c_void,
            pub TypeName: *mut std::ffi::c_void,
            pub LocalInfo: *mut std::ffi::c_void,
            pub UniqueId: crate::GUID,
        }

    } // end of mod ClrCompilation

    pub mod IL {

        #[repr(C)]
        struct NativeDkmCompiledILInspectionQuery {

            BaseClass: crate::Evaluation::DkmCompiledInspectionQuery,
            pub Instructions: *mut std::ffi::c_void,
        }

        #[repr(C)]
        struct NativeDkmILAdd {

            BaseClass: crate::Evaluation::IL::DkmILInstruction,
            pub Type: crate::Evaluation::IL::DkmPrimitiveObjectType,
        }

        #[repr(C)]
        struct NativeDkmILAmpAdjustBufferTag {

            BaseClass: crate::Evaluation::IL::DkmILInstruction,
        }

        #[repr(C)]
        struct NativeDkmILBeginTry {

            BaseClass: crate::Evaluation::IL::DkmILInstruction,
            pub CatchBlocks: *mut std::ffi::c_void,
        }

        #[repr(C)]
        struct NativeDkmILBitAnd {

            BaseClass: crate::Evaluation::IL::DkmILInstruction,
            pub Type: crate::Evaluation::IL::DkmPrimitiveObjectType,
        }

        #[repr(C)]
        struct NativeDkmILBitFieldRead {

            BaseClass: crate::Evaluation::IL::DkmILInstruction,
            pub BitPosition: u32,
            pub NumBits: u32,
            pub Type: crate::Evaluation::IL::DkmPrimitiveObjectType,
        }

        #[repr(C)]
        struct NativeDkmILBitFieldReadFromBytes {

            BaseClass: crate::Evaluation::IL::DkmILInstruction,
            pub ByteOffset: u32,
            pub BitPosition: u32,
            pub NumBits: u32,
            pub Type: crate::Evaluation::IL::DkmPrimitiveObjectType,
        }

        #[repr(C)]
        struct NativeDkmILBitFieldWrite {

            BaseClass: crate::Evaluation::IL::DkmILInstruction,
            pub BitPosition: u32,
            pub NumBits: u32,
        }

        #[repr(C)]
        struct NativeDkmILBitFieldWriteToBytes {

            BaseClass: crate::Evaluation::IL::DkmILInstruction,
            pub ByteOffset: u32,
            pub BitPosition: u32,
            pub NumBits: u32,
        }

        #[repr(C)]
        struct NativeDkmILBitNot {

            BaseClass: crate::Evaluation::IL::DkmILInstruction,
            pub Type: crate::Evaluation::IL::DkmPrimitiveObjectType,
        }

        #[repr(C)]
        struct NativeDkmILBitOr {

            BaseClass: crate::Evaluation::IL::DkmILInstruction,
            pub Type: crate::Evaluation::IL::DkmPrimitiveObjectType,
        }

        #[repr(C)]
        struct NativeDkmILBitShiftLeft {

            BaseClass: crate::Evaluation::IL::DkmILInstruction,
            pub Type: crate::Evaluation::IL::DkmPrimitiveObjectType,
        }

        #[repr(C)]
        struct NativeDkmILBitShiftRight {

            BaseClass: crate::Evaluation::IL::DkmILInstruction,
            pub Type: crate::Evaluation::IL::DkmPrimitiveObjectType,
        }

        #[repr(C)]
        struct NativeDkmILBitXor {

            BaseClass: crate::Evaluation::IL::DkmILInstruction,
            pub Type: crate::Evaluation::IL::DkmPrimitiveObjectType,
        }

        #[repr(u32)]
        pub enum DkmILCallingConvention {

            StdCall = 0,
            CDecl = 1,
            ThisCall = 2,
            FastCall = 3,
        }

        #[repr(C)]
        struct NativeDkmILCatchBlock {

            BaseClass: crate::NativeXapiDispatcherObjectBase,
            pub ErrorCode: crate::Evaluation::IL::DkmILFailureReason,
            pub Target: u32,
        }

        #[repr(C)]
        struct NativeDkmILCheckTimeout {

            BaseClass: crate::Evaluation::IL::DkmILInstruction,
        }

        #[repr(C)]
        struct NativeDkmILCompareEqual {

            BaseClass: crate::Evaluation::IL::DkmILInstruction,
            pub Type: crate::Evaluation::IL::DkmPrimitiveObjectType,
        }

        #[repr(C)]
        struct NativeDkmILCompareGreaterThan {

            BaseClass: crate::Evaluation::IL::DkmILInstruction,
            pub Type: crate::Evaluation::IL::DkmPrimitiveObjectType,
        }

        #[repr(C)]
        struct NativeDkmILCompareGreaterThanOrEqual {

            BaseClass: crate::Evaluation::IL::DkmILInstruction,
            pub Type: crate::Evaluation::IL::DkmPrimitiveObjectType,
        }

        #[repr(C)]
        struct NativeDkmILCompareLessThan {

            BaseClass: crate::Evaluation::IL::DkmILInstruction,
            pub Type: crate::Evaluation::IL::DkmPrimitiveObjectType,
        }

        #[repr(C)]
        struct NativeDkmILCompareLessThanOrEqual {

            BaseClass: crate::Evaluation::IL::DkmILInstruction,
            pub Type: crate::Evaluation::IL::DkmPrimitiveObjectType,
        }

        #[repr(C)]
        struct NativeDkmILCompareNotEqual {

            BaseClass: crate::Evaluation::IL::DkmILInstruction,
            pub Type: crate::Evaluation::IL::DkmPrimitiveObjectType,
        }

        #[repr(C)]
        struct NativeDkmILConvert {

            BaseClass: crate::Evaluation::IL::DkmILInstruction,
            pub OriginalType: crate::Evaluation::IL::DkmPrimitiveObjectType,
            pub TargetType: crate::Evaluation::IL::DkmPrimitiveObjectType,
        }

        #[repr(C)]
        struct NativeDkmILDivide {

            BaseClass: crate::Evaluation::IL::DkmILInstruction,
            pub Type: crate::Evaluation::IL::DkmPrimitiveObjectType,
        }

        #[repr(C)]
        struct NativeDkmILDuplicateTop {

            BaseClass: crate::Evaluation::IL::DkmILInstruction,
        }

        #[repr(C)]
        struct NativeDkmILEndTry {

            BaseClass: crate::Evaluation::IL::DkmILInstruction,
        }

        #[repr(C)]
        struct NativeDkmILEvaluationResult____ExtendedData {

            pub IsPseudoAddress: bool,
            pub DereferencedBytes: *mut std::ffi::c_void,
            pub BackingRegisterId: u32,
            pub BackingRegisterByteOffset: u32,
        }

        #[repr(C)]
        struct NativeDkmILEvaluationResult {

            BaseClass: crate::NativeXapiDispatcherObjectBase,
            pub SourceId: crate::GUID,
            pub ResultBytes: *mut std::ffi::c_void,
            ExtendedData: *const std::ffi::c_void,
        }

        #[repr(C)]
        struct NativeDkmILExecuteFunction {

            BaseClass: crate::Evaluation::IL::DkmILInstruction,
            pub ArgumentCount: u32,
            pub ReturnValueSize: u32,
            pub CallingConvention: crate::Evaluation::IL::DkmILCallingConvention,
            pub Flags: crate::Evaluation::IL::DkmILFunctionEvaluationFlags,
            pub ArgumentFlags: *mut std::ffi::c_void,
            pub UniformComplexReturnElementSize: u32,
        }

        #[repr(C)]
        struct NativeDkmILExecuteIntrinsic____ExtendedData {

            pub SourceWorkerProcess: *mut std::ffi::c_void,
        }

        #[repr(C)]
        struct NativeDkmILExecuteIntrinsic {

            BaseClass: crate::Evaluation::IL::DkmILInstruction,
            pub SourceId: crate::GUID,
            pub LanguageId: crate::GUID,
            pub Id: u32,
            pub ArgumentCount: u32,
            pub Subroutines: *mut std::ffi::c_void,
            ExtendedData: *const std::ffi::c_void,
        }

        #[repr(C)]
        struct NativeDkmILExtractBytes {

            BaseClass: crate::Evaluation::IL::DkmILInstruction,
            pub Offset: u32,
            pub Length: u32,
        }

        #[repr(C)]
        struct NativeDkmILExtractBytesPopArguments {

            BaseClass: crate::Evaluation::IL::DkmILInstruction,
        }

        #[repr(u32)]
        pub enum DkmILFailureReason {

            None = 0,
            DivideByZero = 1,
            MemoryReadError = 2,
            MemoryWriteError = 3,
            RegisterReadError = 4,
            RegisterWriteError = 5,
            Aborted = 6,
            StringTooLong = 7,
            Timeout = 8,
            TooManyFuncEval = 9,
            AbortFailed = 10,
            MinidumpNotSupported = 11,
            AbortUnhandledException = 12,
            UserModeScheduledNotSupported = 13,
            ByteExtractionOutOfBounds = 14,
            InvalidPseudoAddressOperation = 15,
            UnknownFuncEvalError = 16,
            AttemptedToCrossEnclaveBoundaries = 17,
        }

        #[repr(u32)]
        pub enum DkmILFunctionEvaluationArgumentFlags {

            Default = 0x0,
            FloatingPoint = 0x1,
            Scalar = 0x2,
            CopyToDebuggee = 0x4,
            ThisPointer = 0x8,
        }

        #[repr(u32)]
        pub enum DkmILFunctionEvaluationFlags {

            Default = 0x0,
            FloatingPointReturn = 0x1,
            ScalarReturn = 0x2,
            ReturnAddressOfValue = 0x4,
            NoEnregisteredReturn = 0x8,
            HasThisPointer = 0x10,
            EnregisteredComplexReturn = 0x20,
        }

        #[repr(C)]
        struct NativeDkmILHlslBufferRead {

            BaseClass: crate::Evaluation::IL::DkmILInstruction,
            pub RegisterId: u32,
            pub RegisterIndex: u32,
            pub BytesToRead: u32,
        }

        #[repr(C)]
        struct NativeDkmILHlslGetGroupId {

            BaseClass: crate::Evaluation::IL::DkmILInstruction,
            pub GroupIdComponents: crate::GPU::DkmHlslThreadIdComponents,
        }

        #[repr(C)]
        struct NativeDkmILHlslGetThreadId {

            BaseClass: crate::Evaluation::IL::DkmILInstruction,
            pub UseDispatchId: bool,
            pub UseFlatModel: bool,
            pub ThreadIdComponents: crate::GPU::DkmHlslThreadIdComponents,
        }

        #[repr(C)]
        struct NativeDkmILHlslIndexedRegisterRead {

            BaseClass: crate::Evaluation::IL::DkmILInstruction,
            pub RegisterId: u32,
            pub RegisterIndex: u32,
            pub ByteOffset: u32,
            pub BytesToRead: u32,
            pub VectorElements: u32,
        }

        #[repr(C)]
        struct NativeDkmILHlslRegisterRead {

            BaseClass: crate::Evaluation::IL::DkmILInstruction,
            pub RegisterId: u32,
            pub RegisterIndex: u32,
            pub ByteOffset: u32,
            pub BytesToRead: u32,
            pub FirstElement: u32,
            pub VectorElements: u32,
        }

        #[repr(u32)]
        pub enum DkmILInstruction_Tag {

            RegisterRead = 0,
            RegisterWrite = 1,
            MemoryRead = 2,
            MemoryWrite = 3,
            MemoryStringRead = 4,
            TlsGetValue = 5,
            BitFieldRead = 6,
            BitFieldWrite = 7,
            PushConstant = 8,
            DuplicateTop = 9,
            Pop = 10,
            Save = 11,
            Load = 12,
            Nop = 13,
            Add = 14,
            Subtract = 15,
            Multiply = 16,
            Divide = 17,
            Remainder = 18,
            ExtractBytes = 19,
            SetBytesRegion = 20,
            BitFieldReadFromBytes = 21,
            BitFieldWriteToBytes = 22,
            BitAnd = 23,
            BitOr = 24,
            BitXor = 25,
            BitShiftLeft = 26,
            BitShiftRight = 27,
            BitNot = 28,
            IsTrue = 29,
            IsFalse = 30,
            CompareEqual = 31,
            CompareNotEqual = 32,
            CompareGreaterThan = 33,
            CompareGreaterThanOrEqual = 34,
            CompareLessThan = 35,
            CompareLessThanOrEqual = 36,
            Convert = 37,
            ReturnTop = 38,
            Throw = 39,
            Jump = 40,
            JumpIfTrue = 41,
            JumpIfFalse = 42,
            ExecuteIntrinsic = 43,
            BeginTry = 44,
            EndTry = 45,
            ExecuteFunction = 46,
            HlslRegisterRead = 47,
            HlslIndexedRegisterRead = 48,
            HlslBufferRead = 49,
            HlslGetThreadId = 50,
            HlslGetGroupId = 51,
            AmpAdjustBufferTag = 52,
            ExtractBytesPopArguments = 53,
            PushLocalVariablePseudoAddress = 54,
            CheckTimeout = 55,
            PushRegisterPseudoAddress = 56,
        }

        #[repr(C)]
        struct NativeDkmILInstruction {

            BaseClass: crate::NativeXapiDispatcherObjectBase,
            pub TagValue: crate::Evaluation::IL::DkmILInstruction_Tag,
            pub UniqueId: crate::GUID,
            ExtendedData: *const std::ffi::c_void,
        }

        #[repr(C)]
        struct NativeDkmILIsFalse {

            BaseClass: crate::Evaluation::IL::DkmILInstruction,
            pub Type: crate::Evaluation::IL::DkmPrimitiveObjectType,
        }

        #[repr(C)]
        struct NativeDkmILIsTrue {

            BaseClass: crate::Evaluation::IL::DkmILInstruction,
            pub Type: crate::Evaluation::IL::DkmPrimitiveObjectType,
        }

        #[repr(C)]
        struct NativeDkmILJump {

            BaseClass: crate::Evaluation::IL::DkmILInstruction,
            pub Target: u32,
        }

        #[repr(C)]
        struct NativeDkmILJumpIfFalse {

            BaseClass: crate::Evaluation::IL::DkmILInstruction,
            pub Target: u32,
        }

        #[repr(C)]
        struct NativeDkmILJumpIfTrue {

            BaseClass: crate::Evaluation::IL::DkmILInstruction,
            pub Target: u32,
        }

        #[repr(C)]
        struct NativeDkmILLoad {

            BaseClass: crate::Evaluation::IL::DkmILInstruction,
            pub Index: u32,
        }

        #[repr(C)]
        struct NativeDkmILMemoryRead {

            BaseClass: crate::Evaluation::IL::DkmILInstruction,
            pub Size: u32,
            pub Flags: crate::DkmReadMemoryFlags,
        }

        #[repr(C)]
        struct NativeDkmILMemoryStringRead {

            BaseClass: crate::Evaluation::IL::DkmILInstruction,
            pub Flags: crate::DkmReadMemoryFlags,
            pub CharacterSize: u16,
            pub MaxCharacters: u32,
        }

        #[repr(C)]
        struct NativeDkmILMemoryWrite {

            BaseClass: crate::Evaluation::IL::DkmILInstruction,
        }

        #[repr(C)]
        struct NativeDkmILMultiply {

            BaseClass: crate::Evaluation::IL::DkmILInstruction,
            pub Type: crate::Evaluation::IL::DkmPrimitiveObjectType,
        }

        #[repr(C)]
        struct NativeDkmILNop {

            BaseClass: crate::Evaluation::IL::DkmILInstruction,
        }

        #[repr(C)]
        struct NativeDkmILParameterValue____ExtendedData {

            pub IsByRef: bool,
        }

        #[repr(C)]
        struct NativeDkmILParameterValue {

            BaseClass: crate::NativeXapiDispatcherObjectBase,
            pub LocalIndex: u32,
            pub ValueBytes: *mut std::ffi::c_void,
            ExtendedData: *const std::ffi::c_void,
        }

        #[repr(C)]
        struct NativeDkmILPop {

            BaseClass: crate::Evaluation::IL::DkmILInstruction,
        }

        #[repr(C)]
        struct NativeDkmILPushConstant {

            BaseClass: crate::Evaluation::IL::DkmILInstruction,
            pub Value: *mut std::ffi::c_void,
        }

        #[repr(C)]
        struct NativeDkmILPushLocalVariablePseudoAddress {

            BaseClass: crate::Evaluation::IL::DkmILInstruction,
            pub Index: u32,
            pub ByteOffset: u32,
        }

        #[repr(C)]
        struct NativeDkmILPushRegisterPseudoAddress {

            BaseClass: crate::Evaluation::IL::DkmILInstruction,
            pub RegisterId: u32,
            pub ByteOffset: u32,
        }

        #[repr(C)]
        struct NativeDkmILRegisterRead {

            BaseClass: crate::Evaluation::IL::DkmILInstruction,
            pub RegisterId: u32,
        }

        #[repr(C)]
        struct NativeDkmILRegisterWrite {

            BaseClass: crate::Evaluation::IL::DkmILInstruction,
            pub RegisterId: u32,
        }

        #[repr(C)]
        struct NativeDkmILRemainder {

            BaseClass: crate::Evaluation::IL::DkmILInstruction,
            pub Type: crate::Evaluation::IL::DkmPrimitiveObjectType,
        }

        #[repr(C)]
        struct NativeDkmILReturnTop {

            BaseClass: crate::Evaluation::IL::DkmILInstruction,
        }

        #[repr(C)]
        struct NativeDkmILSave {

            BaseClass: crate::Evaluation::IL::DkmILInstruction,
            pub Index: u32,
        }

        #[repr(C)]
        struct NativeDkmILSetBytesRegion {

            BaseClass: crate::Evaluation::IL::DkmILInstruction,
        }

        #[repr(C)]
        struct NativeDkmILSubtract {

            BaseClass: crate::Evaluation::IL::DkmILInstruction,
            pub Type: crate::Evaluation::IL::DkmPrimitiveObjectType,
        }

        #[repr(C)]
        struct NativeDkmILThrow {

            BaseClass: crate::Evaluation::IL::DkmILInstruction,
            pub FailureCode: crate::Evaluation::IL::DkmILFailureReason,
        }

        #[repr(C)]
        struct NativeDkmILTlsGetValue {

            BaseClass: crate::Evaluation::IL::DkmILInstruction,
        }

        #[repr(u32)]
        pub enum DkmPrimitiveObjectType {

            Int8 = 0,
            UInt8 = 1,
            Int16 = 2,
            UInt16 = 3,
            Int32 = 4,
            UInt32 = 5,
            Int64 = 6,
            UInt64 = 7,
            Float = 8,
            Double = 9,
            LongDouble = 10,
        }

    } // end of mod IL

    pub mod Group {

        #[repr(C)]
        struct NativeDkmContextGroupEvaluationILResult {

            BaseClass: crate::NativeXapiDispatcherObjectBase,
            pub EvaluationResults: crate::HRESULT,
            pub ResultData: *mut std::ffi::c_void,
        }

        #[repr(u32)]
        pub enum DkmContextGroupEvaluationResult_Tag {

            SuccessContextGroupEvalResult = 0,
            FailedContextGroupEvalResult = 1,
        }

        #[repr(C)]
        struct NativeDkmContextGroupEvaluationResult {

            BaseClass: crate::NativeXapiDataContainer,
            pub TagValue: crate::Evaluation::Group::DkmContextGroupEvaluationResult_Tag,
            pub ThreadIds: *mut std::ffi::c_void,
            pub EvaluationResults: crate::HRESULT,
            pub Name: *mut std::ffi::c_void,
            pub FullName: *mut std::ffi::c_void,
            pub UniqueId: crate::GUID,
            pub RuntimeInstance: *mut std::ffi::c_void,
            ExtendedData: *const std::ffi::c_void,
        }

        #[repr(C)]
        struct NativeDkmFailedContextGroupEvaluationResult {

            BaseClass: crate::Evaluation::Group::DkmContextGroupEvaluationResult,
            pub ErrorMessage: *mut std::ffi::c_void,
            pub HasSideEffects: bool,
        }

        #[repr(C)]
        struct NativeDkmILParameterValueCollection {

            BaseClass: crate::NativeXapiDispatcherObjectBase,
            pub Parameters: *mut std::ffi::c_void,
        }

        #[repr(C)]
        struct NativeDkmSuccessContextGroupEvaluationResult {

            BaseClass: crate::Evaluation::Group::DkmContextGroupEvaluationResult,
            pub Flags: crate::Evaluation::DkmEvaluationResultFlags,
            pub Values: *mut std::ffi::c_void,
            pub Type: *mut std::ffi::c_void,
            pub Category: crate::Evaluation::DkmEvaluationResultCategory,
            pub Access: crate::Evaluation::DkmEvaluationResultAccessType,
            pub StorageType: crate::Evaluation::DkmEvaluationResultStorageType,
            pub TypeModifierFlags: crate::Evaluation::DkmEvaluationResultTypeModifierFlags,
            pub CustomUIVisualizers: *mut std::ffi::c_void,
        }

        #[repr(C)]
        struct NativeDkmThreadEvaluationResultCollection {

            BaseClass: crate::NativeXapiDispatcherObjectBase,
            pub Results: *mut std::ffi::c_void,
            pub FailureReason: crate::Evaluation::IL::DkmILFailureReason,
        }

    } // end of mod Group

} // end of mod Evaluation

pub mod Symbols {

    #[repr(C)]
    struct NativeDkmBasicInstructionSymbolInfo {

        BaseClass: crate::NativeXapiDispatcherObjectBase,
        pub CompilerId: crate::Evaluation::DkmCompilerId,
        pub MethodName: *mut std::ffi::c_void,
        pub SourcePosition: *mut std::ffi::c_void,
        pub InlineFrameCount: u32,
    }

    #[repr(u32)]
    pub enum DkmBasicSymbolInfoRequestFlags {

        None = 0x0,
        TopFrame = 0x1,
        ComputeInlineFrameCount = 0x2,
    }

    #[repr(C)]
    pub struct DkmCodeViewCompilerId {
        pub LanguageEnumeration: u8,
        pub CompilerName: *mut std::ffi::c_void,
        pub CompilerId: crate::Evaluation::DkmCompilerId,
    }

    #[repr(u32)]
    pub enum DkmCompressionAlgorithmId {

        None = 0,
        Deflate = 1,
    }

    #[repr(C)]
    struct NativeDkmCustomSymbolFileId {

        BaseClass: crate::Symbols::DkmSymbolFileId,
        pub Type: u32,
        pub Data: *mut std::ffi::c_void,
    }

    #[repr(u32)]
    pub enum DkmDocumentMatchStrength {

        FileName = 0,
        SubPath = 1,
        FullPath = 2,
        Checksum = 3,
        ExactURL = 4,
    }

    #[repr(C)]
    struct NativeDkmDynamicSymbolFileId {

        BaseClass: crate::Symbols::DkmSymbolFileId,
    }

    #[repr(C)]
    struct NativeDkmEmbeddedDocument {

        BaseClass: crate::NativeXapiDispatcherObjectBase,
        pub Module: *mut std::ffi::c_void,
        pub Content: *mut std::ffi::c_void,
        pub CompressionAlgorithm: crate::Symbols::DkmCompressionAlgorithmId,
        pub UncompressedSize: u32,
    }

    #[repr(C)]
    struct NativeDkmEmbeddedDwarfSymbolFileId {

        BaseClass: crate::Symbols::DkmSymbolFileId,
    }

    #[repr(C)]
    struct NativeDkmEmbeddedPdbFileId {

        BaseClass: crate::Symbols::DkmSymbolFileId,
        pub RVA: u64,
        pub Size: u32,
    }

    #[repr(C)]
    struct NativeDkmEngineSymbolSettings____ExtendedData {

        pub AutomaticLoading: bool,
    }

    #[repr(C)]
    struct NativeDkmEngineSymbolSettings {

        BaseClass: crate::NativeXapiDispatcherObjectBase,
        pub SymbolPaths: *mut std::ffi::c_void,
        pub SymbolCachePath: *mut std::ffi::c_void,
        pub IncludeList: *mut std::ffi::c_void,
        pub ExcludeList: *mut std::ffi::c_void,
        pub ManualLoading: bool,
        pub LoadAdjacentSymbols: bool,
        ExtendedData: *const std::ffi::c_void,
    }

    #[repr(u32)]
    pub enum DkmHashAlgorithmId {

        MD5 = 0,
        SHA1 = 1,
        SHA256 = 2,
        SHA512 = 3,
    }

    #[repr(C)]
    struct NativeDkmHashValue {

        BaseClass: crate::NativeXapiDispatcherObjectBase,
        pub Algorithm: *mut std::ffi::c_void,
        pub Bytes: *mut std::ffi::c_void,
    }

    #[repr(C)]
    pub struct DkmImageDebugDirectoryFormat {
        pub TypeValue: u32,
        pub SymbolProvider: crate::GUID,
    }

    #[repr(u32)]
    pub enum DkmInstructionSymbol_Tag {

        NativeInstruction = 0,
        ClrInstruction = 1,
        ScriptInstruction = 2,
        CustomInstruction = 3,
    }

    #[repr(C)]
    struct NativeDkmInstructionSymbol {

        BaseClass: crate::NativeXapiDispatcherObjectBase,
        pub TagValue: crate::Symbols::DkmInstructionSymbol_Tag,
        pub Module: *mut std::ffi::c_void,
        pub RuntimeType: crate::GUID,
        ExtendedData: *const std::ffi::c_void,
    }

    #[repr(C)]
    pub struct DkmMD5HashValue {
        pub Value0: u32,
        pub Value1: u32,
        pub Value2: u32,
        pub Value3: u32,
    }

    #[repr(C)]
    struct NativeDkmModule____ExtendedData {

        pub SymbolsConnection: *mut std::ffi::c_void,
        pub FilePath: *mut std::ffi::c_void,
        pub Flags: crate::Symbols::DkmModuleSymbolFlags,
    }

    #[repr(C)]
    struct NativeDkmModule {

        BaseClass: crate::NativeXapiDataContainer,
        pub Id: crate::Symbols::DkmModuleId,
        pub Name: *mut std::ffi::c_void,
        pub CompilerId: crate::Evaluation::DkmCompilerId,
        pub Connection: *mut std::ffi::c_void,
        ExtendedData: *const std::ffi::c_void,
    }

    #[repr(C)]
    pub struct DkmModuleId {
        pub Mvid: crate::GUID,
        pub SymbolProvider: crate::GUID,
    }

    #[repr(u32)]
    pub enum DkmModuleSymbolFlags {

        None = 0x0,
        Decompiled = 0x1,
        DeferredLoad = 0x2,
        Reloadable = 0x4,
    }

    #[repr(C)]
    struct NativeDkmPdbFileId____ExtendedData {

        pub TimeDateStamp: u32,
        pub Version: u32,
        pub Checksums: *mut std::ffi::c_void,
    }

    #[repr(C)]
    struct NativeDkmPdbFileId {

        BaseClass: crate::Symbols::DkmSymbolFileId,
        pub Mvid: crate::GUID,
        pub Age: u32,
        pub PdbName: *mut std::ffi::c_void,
        ExtendedData: *const std::ffi::c_void,
    }

    #[repr(C)]
    pub struct DkmRVASizePair {
        pub RVA: u32,
        pub Size: u32,
    }

    #[repr(C)]
    struct NativeDkmResolvedDocument {

        BaseClass: crate::NativeXapiDataContainer,
        pub Module: *mut std::ffi::c_void,
        pub UniqueId: crate::GUID,
        pub DocumentName: *mut std::ffi::c_void,
        pub ScriptDocument: *mut std::ffi::c_void,
        pub MatchStrength: crate::Symbols::DkmDocumentMatchStrength,
        pub Warning: crate::Symbols::DkmResolvedDocumentWarning,
        pub TextRequested: bool,
        ExtendedData: *const std::ffi::c_void,
    }

    #[repr(u32)]
    pub enum DkmResolvedDocumentWarning {

        None = 0,
        ChecksumMismatch = 1,
        MultipleChecksums = 2,
    }

    #[repr(C)]
    struct NativeDkmResolvedMappedDocument {

        BaseClass: crate::Symbols::DkmResolvedDocument,
        pub ScriptBlocks: *mut std::ffi::c_void,
    }

    #[repr(C)]
    pub struct DkmSHA1HashValue {
        pub Value0: u32,
        pub Value1: u32,
        pub Value2: u32,
        pub Value3: u32,
        pub Value4: u32,
    }

    #[repr(C)]
    struct NativeDkmSourceFileHash {

        BaseClass: crate::NativeXapiDispatcherObjectBase,
        pub Algorithm: crate::Symbols::DkmHashAlgorithmId,
        pub Value: *mut std::ffi::c_void,
    }

    #[repr(C)]
    struct NativeDkmSourceFileId_MD5Hash {

        pub Value: crate::Symbols::DkmMD5HashValue,
    }

    #[repr(C)]
    struct NativeDkmSourceFileId_SHA1Hash {

        pub Value: crate::Symbols::DkmSHA1HashValue,
    }

    #[repr(C)]
    struct NativeDkmSourceFileId____ExtendedData {

        pub AdditionalChecksums: *mut std::ffi::c_void,
    }

    #[repr(C)]
    struct NativeDkmSourceFileId {

        BaseClass: crate::NativeXapiDispatcherObjectBase,
        pub MD5Hash: *mut std::ffi::c_void,
        pub SHA1Hash: *mut std::ffi::c_void,
        pub DocumentName: *mut std::ffi::c_void,
        pub ScriptDocument: *mut std::ffi::c_void,
        ExtendedData: *const std::ffi::c_void,
    }

    #[repr(C)]
    struct NativeDkmSourceLinkInfo {

        BaseClass: crate::NativeXapiDispatcherObjectBase,
        pub Url: *mut std::ffi::c_void,
        pub RelativeFilePath: *mut std::ffi::c_void,
    }

    #[repr(C)]
    struct NativeDkmSourcePosition {

        BaseClass: crate::NativeXapiDispatcherObjectBase,
        pub SourceFileId: *mut std::ffi::c_void,
        pub TextSpan: crate::Symbols::DkmTextSpan,
    }

    #[repr(u32)]
    pub enum DkmSourcePositionFlags {

        None = 0x0,
        ExtendedSourceRange = 0x1,
    }

    #[repr(C)]
    pub struct DkmSteppingRange {
        pub StartOffset: u32,
        pub Length: u32,
        pub LineNumber: u32,
    }

    #[repr(u32)]
    pub enum DkmSteppingRangeBoundary {

        FunctionStart = 0,
        NextStatement = 1,
        NextLine = 2,
        InlineFunctionOut = 3,
    }

    #[repr(u32)]
    pub enum DkmSymbolFileId_Tag {

        PdbFileId = 0,
        DynamicSymbolFileId = 1,
        CustomSymbolFileId = 2,
        EmbeddedPdbFileId = 3,
        EmbeddedDwarfSymbolFileId = 4,
    }

    #[repr(C)]
    struct NativeDkmSymbolFileId {

        BaseClass: crate::NativeXapiDispatcherObjectBase,
        pub TagValue: crate::Symbols::DkmSymbolFileId_Tag,
        pub SymbolProviderId: crate::GUID,
        ExtendedData: *const std::ffi::c_void,
    }

    #[repr(C)]
    struct NativeDkmSymbolsDocument {

        BaseClass: crate::NativeXapiDispatcherObjectBase,
        pub Module: *mut std::ffi::c_void,
        pub CompilerId: crate::Evaluation::DkmCompilerId,
        pub DocumentType: crate::GUID,
        pub HasEmbeddedSource: bool,
        pub SourceFileId: *mut std::ffi::c_void,
    }

    #[repr(C)]
    pub struct DkmTextSpan {
        pub StartLine: u32,
        pub EndLine: u32,
        pub StartColumn: u32,
        pub EndColumn: u32,
    }

} // end of mod Symbols

pub mod FunctionResolution {

    #[repr(u32)]
    pub enum DkmAddressSearchFlags {

        UseWildcard = 0x1,
    }

    #[repr(C)]
    struct NativeDkmRuntimeFunctionResolutionRequest {

        BaseClass: crate::NativeXapiDataContainer,
        pub UniqueId: crate::GUID,
        pub Process: *mut std::ffi::c_void,
        pub CompilerId: crate::Evaluation::DkmCompilerId,
        pub FunctionName: *mut std::ffi::c_void,
        pub LineOffset: u32,
        pub ModuleName: *mut std::ffi::c_void,
        pub SearchFlags: crate::FunctionResolution::DkmAddressSearchFlags,
    }

    #[repr(C)]
    struct NativeDkmSymbolFunctionResolutionRequest____ExtendedData {

        pub SymbolsConnection: *mut std::ffi::c_void,
    }

    #[repr(C)]
    struct NativeDkmSymbolFunctionResolutionRequest {

        BaseClass: crate::NativeXapiDispatcherObjectBase,
        pub Process: *mut std::ffi::c_void,
        pub Module: *mut std::ffi::c_void,
        pub Language: *mut std::ffi::c_void,
        pub FunctionName: *mut std::ffi::c_void,
        pub LineOffset: u32,
        pub ModuleName: *mut std::ffi::c_void,
        pub SearchFlags: crate::FunctionResolution::DkmAddressSearchFlags,
        ExtendedData: *const std::ffi::c_void,
    }

} // end of mod FunctionResolution

pub mod CallStack {

    #[repr(C)]
    struct NativeDkmArm64FrameRegisters {

        BaseClass: crate::CallStack::DkmFrameRegisters,
        pub Pc: u64,
        pub Sp: u64,
    }

    #[repr(C)]
    struct NativeDkmArmFrameRegisters {

        BaseClass: crate::CallStack::DkmFrameRegisters,
        pub Pc: u32,
        pub Sp: u32,
    }

    #[repr(C)]
    struct NativeDkmAsyncStackWalkContext____ExtendedData {

        pub CurrentTaskOnly: bool,
    }

    #[repr(C)]
    struct NativeDkmAsyncStackWalkContext {

        BaseClass: crate::NativeXapiDataContainer,
        pub InspectionSession: *mut std::ffi::c_void,
        pub TaskProviderId: crate::GUID,
        pub TaskIdentityStackFrame: *mut std::ffi::c_void,
        pub InternalStackFrame: *mut std::ffi::c_void,
        pub FrameObject: *mut std::ffi::c_void,
        pub Task: *mut std::ffi::c_void,
        pub ReturnStackFunctions: *mut std::ffi::c_void,
        pub RuntimeInstance: *mut std::ffi::c_void,
        pub UniqueId: crate::GUID,
        ExtendedData: *const std::ffi::c_void,
    }

    #[repr(u32)]
    pub enum DkmCallStackFilterOptions {

        None = 0x0,
        FilterHiddenFrames = 0x1,
        FilterNonuserCode = 0x2,
        IncludeAsyncFrames = 0x4,
        ShowTopNonUserBlock = 0x8,
        HideNonUserExceptionImplementationFrames = 0x10,
        FilterInteractiveFrames = 0x20,
    }

    #[repr(C)]
    pub struct DkmFrameFormatOptions {
        pub ArgumentFlags: crate::Evaluation::DkmVariableInfoFlags,
        pub FrameNameFormat: crate::CallStack::DkmFrameNameFormatOptions,
        pub EvaluationFlags: crate::Evaluation::DkmEvaluationFlags,
        pub Timeout: u32,
        pub Radix: u32,
    }

    #[repr(u32)]
    pub enum DkmFrameNameFormatOptions {

        None = 0x0,
        Module = 0x1,
        Lines = 0x2,
        ByteOffsets = 0x4,
        ReturnType = 0x8,
        ReturnTypeField = 0x10,
        DocumentPositionField = 0x20,
        TaskIds = 0x40,
    }

    #[repr(u32)]
    pub enum DkmFrameRegisters_Tag {

        ArmRegisters = 0,
        X86Registers = 1,
        X64Registers = 2,
        Arm64Registers = 3,
    }

    #[repr(C)]
    struct NativeDkmFrameRegisters {

        BaseClass: crate::NativeXapiDispatcherObjectBase,
        pub TagValue: crate::CallStack::DkmFrameRegisters_Tag,
        pub UnwoundRegisters: *mut std::ffi::c_void,
        ExtendedData: *const std::ffi::c_void,
    }

    #[repr(C)]
    struct NativeDkmMonitorStackWalkContext____ExtendedData {

        pub Flags: crate::CallStack::DkmStackWalkContextFlags,
    }

    #[repr(C)]
    struct NativeDkmMonitorStackWalkContext {

        BaseClass: crate::NativeXapiDataContainer,
        pub RuntimeInstance: *mut std::ffi::c_void,
        pub Thread: *mut std::ffi::c_void,
        pub ThreadContext: *mut std::ffi::c_void,
        pub UniqueId: crate::GUID,
        ExtendedData: *const std::ffi::c_void,
    }

    #[repr(C)]
    pub struct DkmMonitorStackWalkResult {
        pub Status: crate::CallStack::DkmStackWalkStatus,
        pub NextRegisters: *mut std::ffi::c_void,
        pub FrameObject: *mut std::ffi::c_void,
        pub NextStackPointer: u64,
    }

    #[repr(C)]
    struct NativeDkmRawStackContext {

        BaseClass: crate::NativeXapiDataContainer,
        pub Thread: *mut std::ffi::c_void,
        pub ThreadContext: *mut std::ffi::c_void,
        pub UniqueId: crate::GUID,
    }

    #[repr(C)]
    struct NativeDkmStackContext____ExtendedData {

        pub AsyncContext: *mut std::ffi::c_void,
        pub Operation: crate::CallStack::DkmStackWalkOperation,
    }

    #[repr(C)]
    struct NativeDkmStackContext {

        BaseClass: crate::NativeXapiDataContainer,
        pub InspectionSession: *mut std::ffi::c_void,
        pub Thread: *mut std::ffi::c_void,
        pub FilterOptions: crate::CallStack::DkmCallStackFilterOptions,
        pub FormatOptions: crate::CallStack::DkmFrameFormatOptions,
        pub ThreadContext: *mut std::ffi::c_void,
        pub UniqueId: crate::GUID,
        ExtendedData: *const std::ffi::c_void,
    }

    #[repr(C)]
    struct NativeDkmStackFrame____ExtendedData {

        pub IsStale: bool,
    }

    #[repr(C)]
    struct NativeDkmStackFrame {

        BaseClass: crate::CallStack::DkmStackWalkFrame,
        pub Options: crate::CallStack::DkmFrameFormatOptions,
        pub CompilerId: crate::Evaluation::DkmCompilerId,
        pub FrameName: *mut std::ffi::c_void,
        pub ReturnType: *mut std::ffi::c_void,
        pub SourcePosition: *mut std::ffi::c_void,
        ExtendedData: *const std::ffi::c_void,
    }

    #[repr(C)]
    struct NativeDkmStackHash {

        BaseClass: crate::NativeXapiDispatcherObjectBase,
        pub Thread: *mut std::ffi::c_void,
        pub StackMemoryRange: crate::CallStack::DkmStackMemoryRange,
        pub RegisterHash: crate::Symbols::DkmMD5HashValue,
        pub MemoryHash: crate::Symbols::DkmMD5HashValue,
    }

    #[repr(C)]
    struct NativeDkmStackHash164 {

        BaseClass: crate::NativeXapiDispatcherObjectBase,
        pub Thread: *mut std::ffi::c_void,
        pub StackMemoryRange: crate::CallStack::DkmStackMemoryRange,
        pub RegisterHash: *mut std::ffi::c_void,
        pub MemoryHash: *mut std::ffi::c_void,
    }

    #[repr(C)]
    pub struct DkmStackMemoryRange {
        pub StackBase: u64,
        pub StackLimit: u64,
    }

    #[repr(C)]
    struct NativeDkmStackTraceContext {

        BaseClass: crate::CallStack::DkmStackContext,
        pub Frames: *mut std::ffi::c_void,
    }

    #[repr(C)]
    struct NativeDkmStackWalkContext____ExtendedData {

        pub TopStackPointer: u64,
        pub Flags: crate::CallStack::DkmStackWalkContextFlags,
    }

    #[repr(C)]
    struct NativeDkmStackWalkContext {

        BaseClass: crate::NativeXapiDataContainer,
        pub Thread: *mut std::ffi::c_void,
        pub ThreadContext: *mut std::ffi::c_void,
        pub UniqueId: crate::GUID,
        ExtendedData: *const std::ffi::c_void,
    }

    #[repr(u32)]
    pub enum DkmStackWalkContextFlags {

        None = 0x0,
        IncludeLogicalFrames = 0x1,
    }

    #[repr(C)]
    struct NativeDkmStackWalkFrame____ExtendedData {

        pub AnnotatedModule: *mut std::ffi::c_void,
        pub AsyncContext: *mut std::ffi::c_void,
        pub Data: *mut std::ffi::c_void,
        pub BasicSymbolInfo: *mut std::ffi::c_void,
        pub UniqueId: crate::GUID,
    }

    #[repr(C)]
    struct NativeDkmStackWalkFrame {

        BaseClass: crate::NativeXapiDispatcherObjectBase,
        pub Thread: *mut std::ffi::c_void,
        pub InstructionAddress: *mut std::ffi::c_void,
        pub FrameBase: u64,
        pub FrameSize: u32,
        pub Flags: crate::CallStack::DkmStackWalkFrameFlags,
        pub Description: *mut std::ffi::c_void,
        pub Registers: *mut std::ffi::c_void,
        pub Annotations: *mut std::ffi::c_void,
        ExtendedData: *const std::ffi::c_void,
    }

    #[repr(C)]
    struct NativeDkmStackWalkFrameAnnotation____ExtendedData {

        pub VariantValue: *mut std::ffi::c_void,
    }

    #[repr(C)]
    struct NativeDkmStackWalkFrameAnnotation {

        BaseClass: crate::NativeXapiDispatcherObjectBase,
        pub Id: crate::GUID,
        pub Value: u64,
        ExtendedData: *const std::ffi::c_void,
    }

    #[repr(C)]
    struct NativeDkmStackWalkFrameData {

        BaseClass: crate::NativeXapiDataContainer,
        pub InspectionSession: *mut std::ffi::c_void,
        pub UniqueId: crate::GUID,
    }

    #[repr(u32)]
    pub enum DkmStackWalkFrameFlags {

        None = 0x0,
        TopFrame = 0x1,
        Hidden = 0x2,
        NonuserCode = 0x4,
        InlineOptimized = 0x8,
        MaxFramesExceeded = 0x10,
        ExceptionUnwindTarget = 0x20,
        FuncEvalFrame = 0x40,
        ReturnStackFrame = 0x80,
        TaskCreationStackFrame = 0x100,
        UserStatusNotDetermined = 0x200,
        SymbolsNotLoadedAnnotation = 0x400,
        NonUserExceptionImplementation = 0x800,
        AsyncCallAnnotatedFrame = 0x1000,
        AsyncContinuationAnnotatedFrame = 0x2000,
        FakeFrame = 0x4000,
        BinaryNotLoadedAnnotation = 0x8000,
        HiddenExternal = 0x10000,
    }

    #[repr(u32)]
    pub enum DkmStackWalkOperation {

        Standard = 0,
        TaskContinuations = 1,
        TaskCreation = 2,
        Async = 3,
        StackTrace = 4,
    }

    #[repr(u32)]
    pub enum DkmStackWalkStatus {

        FrameFound = 0,
        OutsideOfRuntime = 1,
        EndOfStack = 2,
    }

    #[repr(C)]
    struct NativeDkmSymbolStackWalkContext {

        BaseClass: crate::NativeXapiDataContainer,
        pub StackWalkContext: *mut std::ffi::c_void,
        pub SymbolProviderId: crate::GUID,
    }

    #[repr(C)]
    struct NativeDkmUnwoundRegister {

        BaseClass: crate::NativeXapiDispatcherObjectBase,
        pub Identifier: u32,
        pub Value: *mut std::ffi::c_void,
    }

    #[repr(C)]
    struct NativeDkmX64FrameRegisters {

        BaseClass: crate::CallStack::DkmFrameRegisters,
        pub Rip: u64,
        pub Rsp: u64,
    }

    #[repr(C)]
    struct NativeDkmX86FrameRegisters {

        BaseClass: crate::CallStack::DkmFrameRegisters,
        pub Eip: u32,
        pub Esp: u32,
        pub VFrame: u32,
    }

} // end of mod CallStack

pub mod Exceptions {

    #[repr(C)]
    struct NativeDkmExceptionCategoryTrigger {

        BaseClass: crate::Exceptions::DkmExceptionTrigger,
        pub ExceptionCategory: crate::GUID,
    }

    #[repr(C)]
    struct NativeDkmExceptionCodeTrigger {

        BaseClass: crate::Exceptions::DkmExceptionTrigger,
        pub ExceptionCategory: crate::GUID,
        pub Code: u32,
    }

    #[repr(C)]
    struct NativeDkmExceptionConditionInfo {

        BaseClass: crate::NativeXapiDispatcherObjectBase,
        pub Type: u32,
        pub CallStackBehavior: u32,
        pub Operator: u32,
        pub Value: *mut std::ffi::c_void,
    }

    #[repr(C)]
    struct NativeDkmExceptionDetails {

        BaseClass: crate::NativeXapiDataContainer,
        pub InspectionSession: *mut std::ffi::c_void,
        pub Exception: *mut std::ffi::c_void,
        pub UniqueId: crate::GUID,
    }

    #[repr(C)]
    struct NativeDkmExceptionGlobalTrigger {

        BaseClass: crate::Exceptions::DkmExceptionTrigger,
    }

    #[repr(u32)]
    pub enum DkmExceptionInformation_Tag {

        Win32Exception = 0,
        ClrException = 1,
        CppException = 2,
        GPUMemoryAccessException = 3,
        CustomException = 4,
    }

    #[repr(C)]
    struct NativeDkmExceptionInformation {

        BaseClass: crate::NativeXapiDispatcherObjectBase,
        pub TagValue: crate::Exceptions::DkmExceptionInformation_Tag,
        pub RuntimeInstance: *mut std::ffi::c_void,
        pub ExceptionCategory: crate::GUID,
        pub Thread: *mut std::ffi::c_void,
        pub InstructionAddress: *mut std::ffi::c_void,
        pub Name: *mut std::ffi::c_void,
        pub Code: u32,
        pub ProcessingStage: crate::Exceptions::DkmExceptionProcessingStage,
        pub ImplementationException: *mut std::ffi::c_void,
        ExtendedData: *const std::ffi::c_void,
    }

    #[repr(u32)]
    pub enum DkmExceptionInterceptActionFlags {

        None = 0x0,
        Intercept = 0x1,
        CancelIntercept = 0x2,
    }

    #[repr(C)]
    struct NativeDkmExceptionNameTrigger {

        BaseClass: crate::Exceptions::DkmExceptionTrigger,
        pub ExceptionCategory: crate::GUID,
        pub Name: *mut std::ffi::c_void,
    }

    #[repr(u32)]
    pub enum DkmExceptionProcessingStage {

        Thrown = 0x1,
        UserCodeSearch = 0x2,
        AppDomainTransition = 0x4,
        ManagedUnmanagedTransition = 0x8,
        UserUnhandled = 0x10,
        Unhandled = 0x20,
        UserVisible = 0x40,
        Caught = 0x80,
    }

    #[repr(u32)]
    pub enum DkmExceptionTrigger_Tag {

        GlobalTrigger = 0,
        CategoryTrigger = 1,
        NameTrigger = 2,
        CodeTrigger = 3,
    }

    #[repr(C)]
    struct NativeDkmExceptionTrigger____ExtendedData {

        pub ExceptionConditionInfo: *mut std::ffi::c_void,
    }

    #[repr(C)]
    struct NativeDkmExceptionTrigger {

        BaseClass: crate::NativeXapiDispatcherObjectBase,
        pub TagValue: crate::Exceptions::DkmExceptionTrigger_Tag,
        pub ProcessingStage: crate::Exceptions::DkmExceptionProcessingStage,
        pub Thread: *mut std::ffi::c_void,
        ExtendedData: *const std::ffi::c_void,
    }

    #[repr(C)]
    struct NativeDkmExceptionTriggerHit____ExtendedData {

        pub StackTrace: *mut std::ffi::c_void,
        pub ExceptionConditionInfo: *mut std::ffi::c_void,
    }

    #[repr(C)]
    struct NativeDkmExceptionTriggerHit {

        BaseClass: crate::NativeXapiDispatcherObjectBase,
        pub Exception: *mut std::ffi::c_void,
        pub Description: *mut std::ffi::c_void,
        pub RestrictedErrorDescription: *mut std::ffi::c_void,
        pub CapabilitySid: *mut std::ffi::c_void,
        pub RestrictedReference: *mut std::ffi::c_void,
        pub AdditionalInformation: *mut std::ffi::c_void,
        pub SourceId: crate::GUID,
        ExtendedData: *const std::ffi::c_void,
    }

    #[repr(C)]
    struct NativeDkmStowedExceptionInformation_NestedException {

        pub NestedExceptionAddress: u64,
        pub NestedExceptionType: crate::Exceptions::DkmStowedExceptionNestedType,
    }

    #[repr(C)]
    struct NativeDkmStowedExceptionInformation {

        BaseClass: crate::NativeXapiDispatcherObjectBase,
        pub NestedException: *mut std::ffi::c_void,
        pub ResultCode: crate::HRESULT,
        pub ThreadId: u32,
        pub ErrorText: *mut std::ffi::c_void,
        pub ExceptionAddress: u64,
        pub StackTraceWordSize: u32,
        pub StackTraceWords: u32,
        pub StackTrace: u64,
    }

    #[repr(u32)]
    pub enum DkmStowedExceptionNestedType {

        None = 0,
        Win32 = 1,
        Stowed = 2,
        LEO = 3,
    }

} // end of mod Exceptions

pub mod Breakpoints {

    #[repr(C)]
    struct NativeDkmBoundBreakpoint {

        BaseClass: crate::NativeXapiDataContainer,
        pub PendingBreakpoint: *mut std::ffi::c_void,
        pub UniqueId: crate::GUID,
        pub Target: *mut std::ffi::c_void,
        pub SourcePosition: *mut std::ffi::c_void,
    }

    #[repr(C)]
    struct NativeDkmBreakpointCondition {

        BaseClass: crate::NativeXapiDispatcherObjectBase,
        pub Operator: crate::Breakpoints::DkmBreakpointConditionOperator,
        pub CompilerId: crate::Evaluation::DkmCompilerId,
        pub CompilationFlags: crate::Evaluation::DkmEvaluationFlags,
        pub Text: *mut std::ffi::c_void,
        pub Timeout: u32,
    }

    #[repr(u32)]
    pub enum DkmBreakpointConditionOperator {

        BreakWhenTrue = 0,
        BreakWhenChanged = 1,
    }

    #[repr(C)]
    struct NativeDkmBreakpointFileUpdateNotification {

        BaseClass: crate::NativeXapiDispatcherObjectBase,
        pub FilePaths: *mut std::ffi::c_void,
    }

    #[repr(C)]
    struct NativeDkmBreakpointHitCountCondition {

        BaseClass: crate::NativeXapiDispatcherObjectBase,
        pub Operator: crate::Breakpoints::DkmBreakpointHitCountConditionOperator,
        pub Operand: u32,
    }

    #[repr(u32)]
    pub enum DkmBreakpointHitCountConditionOperator {

        Equal = 0,
        EqualOrGreater = 1,
        Modulo = 2,
    }

    #[repr(u32)]
    pub enum DkmBreakpointMessageLevel {

        WarningLevel1 = 0,
        WarningLevel2 = 1,
        WarningLevel3 = 2,
        WarningLevel4 = 3,
        WarningLevel5 = 4,
        WarningLevel6 = 5,
        WarningLevel7 = 6,
        WarningLevel8 = 7,
        WarningLevel9 = 8,
        WarningLevel10 = 9,
        WarningLevel11 = 10,
        WarningLevel12 = 11,
        WarningLevel13 = 12,
        WarningLevel14 = 13,
        WarningLevel15 = 14,
        LowError = 15,
        StandardError = 16,
        HighestError = 17,
        ConditionError = 18,
    }

    #[repr(u32)]
    pub enum DkmBreakpointUnboundReason {

        CodeUnload = 0,
        Rebind = 1,
    }

    #[repr(u32)]
    pub enum DkmDataAccessStopMask {

        Write = 0x1,
        ReadWrite = 0x2,
        Execute = 0x4,
    }

    #[repr(C)]
    struct NativeDkmEvaluationBreakpointCondition {

        BaseClass: crate::NativeXapiDataContainer,
        pub RuntimeBreakpoint: *mut std::ffi::c_void,
        pub Source: *mut std::ffi::c_void,
        pub Language: *mut std::ffi::c_void,
        pub UniqueId: crate::GUID,
    }

    #[repr(C)]
    struct NativeDkmPendingAddressBreakpoint {

        BaseClass: crate::Breakpoints::DkmPendingBreakpoint,
        pub InstructionAddress: *mut std::ffi::c_void,
    }

    #[repr(C)]
    struct NativeDkmPendingAddressNameBreakpoint {

        BaseClass: crate::Breakpoints::DkmPendingBreakpoint,
        pub ModuleName: *mut std::ffi::c_void,
        pub AddressName: *mut std::ffi::c_void,
        pub FunctionName: *mut std::ffi::c_void,
    }

    #[repr(u32)]
    pub enum DkmPendingBreakpoint_Tag {

        FileLineBreakpoint = 0,
        FunctionBreakpoint = 1,
        AddressBreakpoint = 2,
        AddressNameBreakpoint = 3,
        DataBreakpoint = 4,
    }

    #[repr(C)]
    struct NativeDkmPendingBreakpoint {

        BaseClass: crate::NativeXapiDataContainer,
        pub TagValue: crate::Breakpoints::DkmPendingBreakpoint_Tag,
        pub Process: *mut std::ffi::c_void,
        pub UniqueId: crate::GUID,
        pub SourceId: crate::GUID,
        pub CompilerId: crate::Evaluation::DkmCompilerId,
        pub Thread: *mut std::ffi::c_void,
        pub IsBarrier: bool,
        ExtendedData: *const std::ffi::c_void,
        BoundBreakpointCollection0: *const std::ffi::c_void,
    }

    #[repr(C)]
    struct NativeDkmPendingDataBreakpoint {

        BaseClass: crate::Breakpoints::DkmPendingBreakpoint,
        pub DataElementLocation: *mut std::ffi::c_void,
        pub Size: u32,
    }

    #[repr(C)]
    struct NativeDkmPendingFileLineBreakpoint {

        BaseClass: crate::Breakpoints::DkmPendingBreakpoint,
    }

    #[repr(C)]
    struct NativeDkmPendingFunctionBreakpoint {

        BaseClass: crate::Breakpoints::DkmPendingBreakpoint,
        pub ModuleName: *mut std::ffi::c_void,
        pub FunctionName: *mut std::ffi::c_void,
        pub LineOffset: u32,
    }

    #[repr(u32)]
    pub enum DkmRuntimeBreakpoint_Tag {

        InstructionBreakpoint = 0,
        NativeDataBreakpoint = 1,
        CustomDataBreakpoint = 2,
        ClrDataBreakpoint = 3,
    }

    #[repr(C)]
    struct NativeDkmRuntimeBreakpoint {

        BaseClass: crate::NativeXapiDataContainer,
        pub TagValue: crate::Breakpoints::DkmRuntimeBreakpoint_Tag,
        pub RuntimeInstance: *mut std::ffi::c_void,
        pub UniqueId: crate::GUID,
        pub SourceId: crate::GUID,
        pub Thread: *mut std::ffi::c_void,
        ExtendedData: *const std::ffi::c_void,
        EvaluationConditionCollection0: *const std::ffi::c_void,
    }

    #[repr(C)]
    struct NativeDkmRuntimeClrDataBreakpoint {

        BaseClass: crate::Breakpoints::DkmRuntimeBreakpoint,
        pub Access: crate::Breakpoints::DkmDataAccessStopMask,
    }

    #[repr(C)]
    struct NativeDkmRuntimeCustomDataBreakpoint {

        BaseClass: crate::Breakpoints::DkmRuntimeBreakpoint,
        pub Description: *mut std::ffi::c_void,
        pub Access: crate::Breakpoints::DkmDataAccessStopMask,
    }

    #[repr(C)]
    struct NativeDkmRuntimeHardwareDataBreakpoint {

        BaseClass: crate::Breakpoints::DkmRuntimeBreakpoint,
        pub Address: u64,
        pub Access: crate::Breakpoints::DkmDataAccessStopMask,
        pub Size: u32,
    }

    #[repr(C)]
    struct NativeDkmRuntimeInstructionBreakpoint {

        BaseClass: crate::Breakpoints::DkmRuntimeBreakpoint,
        pub InstructionAddress: *mut std::ffi::c_void,
        pub IsBarrier: bool,
    }

} // end of mod Breakpoints

pub mod Stepping {

    #[repr(u32)]
    pub enum DkmLanguageStepIntoFlags {

        None = 0x0,
        NoStepInto = 0x1,
    }

    #[repr(C)]
    struct NativeDkmNativeSteppingCallSite {

        BaseClass: crate::NativeXapiDispatcherObjectBase,
        pub CallSite: *mut std::ffi::c_void,
        pub CallTarget: *mut std::ffi::c_void,
        pub CallTargetAddress: *mut std::ffi::c_void,
    }

    #[repr(C)]
    struct NativeDkmSingleStepRequest {

        BaseClass: crate::NativeXapiDispatcherObjectBase,
        pub SourceId: crate::GUID,
        pub Thread: *mut std::ffi::c_void,
    }

    #[repr(u32)]
    pub enum DkmStepArbitrationReason {

        NewStep = 0,
        UnknownModule = 1,
        NoSymbols = 2,
        TransitionModule = 3,
        ExitRuntime = 4,
        EnterRuntime = 5,
        NoSource = 6,
        ExceptionHandlerFound = 7,
        InstructionLevelOverride = 8,
        Unknown = 9,
        AsyncStep = 10,
        ExitThread = 11,
    }

    #[repr(u32)]
    pub enum DkmStepKind {

        Into = 0,
        Over = 1,
        Out = 2,
        StepIntoSpecific = 3,
    }

    #[repr(u32)]
    pub enum DkmStepUnit {

        Statement = 0,
        Line = 1,
        Instruction = 2,
    }

    #[repr(C)]
    struct NativeDkmStepper____ExtendedData {

        pub ShouldCaptureReturnValue: bool,
        pub CurrentCodePaths: *mut std::ffi::c_void,
        pub CurrentMethodName: *mut std::ffi::c_void,
    }

    #[repr(C)]
    struct NativeDkmStepper {

        BaseClass: crate::NativeXapiDataContainer,
        pub UniqueId: crate::GUID,
        pub Thread: *mut std::ffi::c_void,
        pub StartingAddress: *mut std::ffi::c_void,
        pub FrameBase: u64,
        pub StepKind: crate::Stepping::DkmStepKind,
        pub StepUnit: crate::Stepping::DkmStepUnit,
        pub SourceId: crate::GUID,
        pub CodePath: *mut std::ffi::c_void,
        pub CrossThreadParent: *mut std::ffi::c_void,
        ExtendedData: *const std::ffi::c_void,
    }

    #[repr(C)]
    struct NativeDkmSteppingCodePath {

        BaseClass: crate::NativeXapiDispatcherObjectBase,
        pub Name: *mut std::ffi::c_void,
        pub CodePathOffset: u32,
        pub EndOffset: u32,
        pub AdditionalData: *mut std::ffi::c_void,
    }

    #[repr(C)]
    struct NativeDkmSteppingCodePathSource {

        BaseClass: crate::NativeXapiDispatcherObjectBase,
        pub InstructionSymbol: *mut std::ffi::c_void,
        pub InstructionAddress: *mut std::ffi::c_void,
        pub Language: *mut std::ffi::c_void,
    }

} // end of mod Stepping

pub mod Start {

    #[repr(C)]
    struct NativeDkmActivateAppPackageInfo {

        BaseClass: crate::NativeXapiDispatcherObjectBase,
        pub Connection: *mut std::ffi::c_void,
        pub AppPlatform: crate::DefaultPort::DkmPackagedAppPlatform,
        pub ActivationName: *mut std::ffi::c_void,
        pub LaunchForDebugging: bool,
        pub LaunchArguments: *mut std::ffi::c_void,
        pub ActivationOptions: crate::DefaultPort::DkmActivateAppPackageFlags,
        pub Monitor: u32,
    }

    #[repr(C)]
    struct NativeDkmDebugLaunchSettings {

        BaseClass: crate::NativeXapiDispatcherObjectBase,
        pub OptionsString: *mut std::ffi::c_void,
        pub EngineFilter: *mut std::ffi::c_void,
    }

    #[repr(C)]
    struct NativeDkmDebugProcessRequest {

        BaseClass: crate::NativeXapiDispatcherObjectBase,
        pub ProcessId: u32,
        pub StartTime: u64,
        pub LogicalParentProcess: *mut std::ffi::c_void,
        pub Path: *mut std::ffi::c_void,
        pub EngineFilter: *mut std::ffi::c_void,
        pub Flags: crate::Start::DkmDebugProcessRequestFlags,
    }

    #[repr(u32)]
    pub enum DkmDebugProcessRequestFlags {

        None = 0x0,
        DetachOnStop = 0x1,
    }

    #[repr(C)]
    pub struct DkmLaunchedProcessInfo {
        pub ProcessId: u32,
        pub StartTime: u64,
        pub ThreadId: u32,
    }

    #[repr(C)]
    struct NativeDkmLoadCompleteEventDeferral {

        BaseClass: crate::NativeXapiDispatcherObjectBase,
        pub Process: *mut std::ffi::c_void,
        pub Id: crate::GUID,
    }

    #[repr(C)]
    struct NativeDkmNonDebugProcess {

        BaseClass: crate::NativeXapiDataContainer,
        pub Connection: *mut std::ffi::c_void,
        pub ProcessId: u32,
        pub StartTime: u64,
        pub Path: *mut std::ffi::c_void,
        pub UniqueId: crate::GUID,
    }

    #[repr(C)]
    struct NativeDkmProcessAttachRequest____ExtendedData {

        pub StartTime: u64,
    }

    #[repr(C)]
    struct NativeDkmProcessAttachRequest {

        BaseClass: crate::NativeXapiDispatcherObjectBase,
        pub Connection: *mut std::ffi::c_void,
        pub Path: *mut std::ffi::c_void,
        pub ProcessId: u32,
        pub UniqueProcessId: crate::GUID,
        pub StartMethod: crate::Start::DkmStartMethod,
        pub HostingProcessLanguage: crate::GUID,
        pub EngineSettings: *mut std::ffi::c_void,
        pub DebugLaunchSettings: *mut std::ffi::c_void,
        ExtendedData: *const std::ffi::c_void,
    }

    #[repr(C)]
    struct NativeDkmProcessLaunchEnvironmentFilterInputData {

        BaseClass: crate::NativeXapiDispatcherObjectBase,
        pub Connection: *mut std::ffi::c_void,
        pub DebugLaunchSettings: *mut std::ffi::c_void,
        pub ExecutablePath: *mut std::ffi::c_void,
        pub AppPackageId: *mut std::ffi::c_void,
        pub LaunchFlags: crate::Start::DkmProcessLaunchFlags,
    }

    #[repr(u32)]
    pub enum DkmProcessLaunchEnvironmentFilterScenario {

        ClassicLaunch = 0,
        AppPackageLaunch = 1,
    }

    #[repr(u32)]
    pub enum DkmProcessLaunchFlags {

        None = 0x0,
        VsdebugengEngineUsed = 0x1,
        ProfilingLaunch = 0x2,
    }

    #[repr(u32)]
    pub enum DkmProcessLaunchModeFlags {

        None = 0x0,
        NoDebug = 0x1,
        EnableENC = 0x2,
        MergeEnvironment = 0x4,
        StandardOutputToOutputWindow = 0x8,
        IntegratedConsole = 0x10,
        SingleUseIntegratedConsole = 0x20,
    }

    #[repr(C)]
    struct NativeDkmProcessLaunchRequest____ExtendedData {

        pub LaunchFlags: crate::Start::DkmProcessLaunchFlags,
    }

    #[repr(C)]
    struct NativeDkmProcessLaunchRequest {

        BaseClass: crate::NativeXapiDataContainer,
        pub FileName: *mut std::ffi::c_void,
        pub Arguments: *mut std::ffi::c_void,
        pub WorkingDirectory: *mut std::ffi::c_void,
        pub Environment: *mut std::ffi::c_void,
        pub StartupInfo: *mut std::ffi::c_void,
        pub ModeFlags: crate::Start::DkmProcessLaunchModeFlags,
        pub Win32Flags: u32,
        pub Connection: *mut std::ffi::c_void,
        pub UniqueId: crate::GUID,
        pub EngineSettings: *mut std::ffi::c_void,
        pub DebugLaunchSettings: *mut std::ffi::c_void,
        ExtendedData: *const std::ffi::c_void,
    }

    #[repr(C)]
    struct NativeDkmProcessStartupInfo {

        BaseClass: crate::NativeXapiDispatcherObjectBase,
        pub Desktop: *mut std::ffi::c_void,
        pub Title: *mut std::ffi::c_void,
        pub X: u32,
        pub Y: u32,
        pub XSize: u32,
        pub YSize: u32,
        pub XCountChars: u32,
        pub YCountChars: u32,
        pub FillAttribute: u32,
        pub Flags: u32,
        pub ShowWindow: u16,
        pub StdInputHandle: u64,
        pub StdOutputHandle: u64,
        pub StdErrorHandle: u64,
    }

    #[repr(u32)]
    pub enum DkmStartMethod {

        Launch = 0,
        Attach = 1,
        AttachForSuspendedLaunch = 2,
        AttachForHostingLaunch = 3,
    }

} // end of mod Start

pub mod DefaultPort {

    #[repr(u32)]
    pub enum DkmActivateAppPackageFlags {

        None = 0x0,
        Prelaunch = 0x1,
    }

    #[repr(C)]
    struct NativeDkmAppPackageId {

        BaseClass: crate::NativeXapiDispatcherObjectBase,
        pub AppPlatform: crate::DefaultPort::DkmPackagedAppPlatform,
        pub FullName: *mut std::ffi::c_void,
    }

    #[repr(u32)]
    pub enum DkmDebuggerCpuArchitecture {

        DcaUnknown = 0,
        DcaX86 = 1,
        DcaX64 = 2,
        DcaArm32 = 3,
        DcaArm64 = 4,
        DcaArm64EC = 5,
    }

    #[repr(C)]
    struct NativeDkmDeploymentCommand {

        BaseClass: crate::NativeXapiDataContainer,
        pub UniqueId: crate::GUID,
        pub Connection: *mut std::ffi::c_void,
        pub SourceId: crate::GUID,
        pub RemoteExecutable: *mut std::ffi::c_void,
        pub Arguments: *mut std::ffi::c_void,
        pub CurrentDirectory: *mut std::ffi::c_void,
        pub Flags: crate::DefaultPort::DkmDeploymentCommandFlags,
    }

    #[repr(u32)]
    pub enum DkmDeploymentCommandFlags {

        Default = 0x0,
        ConsoleCodePage = 0x1,
        CombineStdErr = 0x2,
        ShowUI = 0x4,
    }

    #[repr(C)]
    struct NativeDkmDeviceInfo____ExtendedData {

        pub DeviceID: *mut std::ffi::c_void,
    }

    #[repr(C)]
    struct NativeDkmDeviceInfo {

        BaseClass: crate::NativeXapiDispatcherObjectBase,
        pub DeviceFamily: *mut std::ffi::c_void,
        pub DeviceFamilyVersion: *mut std::ffi::c_void,
        pub DeviceForm: *mut std::ffi::c_void,
        ExtendedData: *const std::ffi::c_void,
    }

    #[repr(C)]
    struct NativeDkmFileInfo {

        BaseClass: crate::NativeXapiDispatcherObjectBase,
        pub FileName: *mut std::ffi::c_void,
        pub FilePath: *mut std::ffi::c_void,
        pub Attributes: u32,
        pub CreationTime: u64,
        pub LastAccessTime: u64,
        pub LastWriteTime: u64,
        pub FileSize: u64,
    }

    #[repr(C)]
    struct NativeDkmFileTransferStream {

        BaseClass: crate::NativeXapiDataContainer,
        pub UniqueId: crate::GUID,
        pub Connection: *mut std::ffi::c_void,
        pub RemoteFilePath: *mut std::ffi::c_void,
    }

    #[repr(C)]
    struct NativeDkmIISAppPoolInfo {

        BaseClass: crate::NativeXapiDispatcherObjectBase,
        pub Name: *mut std::ffi::c_void,
        pub Bindings: *mut std::ffi::c_void,
        pub WorkerProcessIds: *mut std::ffi::c_void,
    }

    #[repr(C)]
    struct NativeDkmInstalledAppPackageInfo____ExtendedData {

        pub ProcessorArchitecture: *mut std::ffi::c_void,
    }

    #[repr(C)]
    struct NativeDkmInstalledAppPackageInfo {

        BaseClass: crate::NativeXapiDispatcherObjectBase,
        pub AppPackageId: *mut std::ffi::c_void,
        pub DisplayName: *mut std::ffi::c_void,
        pub Version: *mut std::ffi::c_void,
        pub LogoPath: *mut std::ffi::c_void,
        pub Applications: *mut std::ffi::c_void,
        ExtendedData: *const std::ffi::c_void,
    }

    #[repr(C)]
    struct NativeDkmInstalledApplicationInfo____ExtendedData {

        pub EntryPoint: *mut std::ffi::c_void,
    }

    #[repr(C)]
    struct NativeDkmInstalledApplicationInfo {

        BaseClass: crate::NativeXapiDispatcherObjectBase,
        pub AppUserModelId: *mut std::ffi::c_void,
        pub DisplayName: *mut std::ffi::c_void,
        pub Executable: *mut std::ffi::c_void,
        pub SmallLogoPath: *mut std::ffi::c_void,
        pub BackgroundColor: *mut std::ffi::c_void,
        pub Description: *mut std::ffi::c_void,
        pub DefaultDebugEngine: crate::GUID,
        ExtendedData: *const std::ffi::c_void,
    }

    #[repr(C)]
    struct NativeDkmModuleInformation {

        BaseClass: crate::NativeXapiDispatcherObjectBase,
        pub FullPath: *mut std::ffi::c_void,
        pub Version: *mut std::ffi::c_void,
    }

    #[repr(u32)]
    pub enum DkmPackageExecutionState {

        Unknown = 0,
        Running = 1,
        Suspending = 2,
        Suspended = 3,
        Terminated = 4,
    }

    #[repr(u32)]
    pub enum DkmPackagedAppPlatform {

        WindowsAppx = 0,
        WindowsPhoneXAP = 1,
    }

    #[repr(u32)]
    pub enum DkmProcessorFeatures {

        None = 0x0,
        MMX = 0x1,
        SSE = 0x2,
        SSE2 = 0x4,
        AMD3DNow = 0x8,
        AVX = 0x10,
        VFP32 = 0x20,
        AVX512 = 0x40,
        MPX = 0x80,
        CETSSP = 0x100,
        AMX = 0x200,
    }

    #[repr(C)]
    struct NativeDkmProductionAgent {

        BaseClass: crate::NativeXapiDataContainer,
        pub UniqueId: crate::GUID,
        pub AgentCommand: *mut std::ffi::c_void,
        pub ProductionConnection: *mut std::ffi::c_void,
        pub VsService: crate::GUID,
    }

    #[repr(C)]
    struct NativeDkmProductionConnection {

        BaseClass: crate::NativeXapiDataContainer,
        pub UniqueId: crate::GUID,
        pub Connection: *mut std::ffi::c_void,
    }

    #[repr(C)]
    struct NativeDkmPublishedProgramInfo {

        BaseClass: crate::NativeXapiDispatcherObjectBase,
        pub FriendlyName: *mut std::ffi::c_void,
        pub EngineIds: *mut std::ffi::c_void,
    }

    #[repr(C)]
    struct NativeDkmRecordedProcessInfo {

        BaseClass: crate::NativeXapiDataContainer,
        pub Connection: *mut std::ffi::c_void,
        pub Path: *mut std::ffi::c_void,
    }

    #[repr(u32)]
    pub enum DkmRemoteAuthenticationMode {

        WindowsNegotiate = 0,
        Kerberos = 1,
        NTLM = 2,
        None = 3,
        Custom = 4,
    }

    #[repr(u32)]
    pub enum DkmRunningProcessFlags {

        None = 0x0,
        Wow64 = 0x1,
        DebuggerAttached = 0x2,
        OtherUser = 0x4,
        SecurityWarningOnAttach = 0x8,
        AppContainer = 0x10,
        HideFromDefaultProcessList = 0x20,
        ClrNativeCompilationRuntimeLoaded = 0x40,
    }

    #[repr(C)]
    struct NativeDkmRunningProcessInfo____ExtendedData {

        pub ParentId: u32,
        pub AppPool: *mut std::ffi::c_void,
    }

    #[repr(C)]
    struct NativeDkmRunningProcessInfo {

        BaseClass: crate::NativeXapiDispatcherObjectBase,
        pub Id: u32,
        pub StartTime: u64,
        pub SessionId: u32,
        pub Name: *mut std::ffi::c_void,
        pub Title: *mut std::ffi::c_void,
        pub UserName: *mut std::ffi::c_void,
        pub ClrVersions: *mut std::ffi::c_void,
        pub CommandLine: *mut std::ffi::c_void,
        pub CurrentDirectory: *mut std::ffi::c_void,
        pub EnvironmentBlock: *mut std::ffi::c_void,
        pub IntegrityLevel: u32,
        pub PublishedPrograms: *mut std::ffi::c_void,
        pub Flags: crate::DefaultPort::DkmRunningProcessFlags,
        pub ProcessorArchitecture: u16,
        pub AppPackageId: *mut std::ffi::c_void,
        ExtendedData: *const std::ffi::c_void,
    }

    #[repr(u32)]
    pub enum DkmRunningProcessInfoPropertyMask {

        Empty = 0x0,
        StartTime = 0x1,
        SessionId = 0x2,
        Name = 0x4,
        Title = 0x8,
        UserName = 0x10,
        ClrVersions = 0x20,
        CommandLine = 0x40,
        CurrentDirectory = 0x80,
        EnvironmentBlock = 0x100,
        IntegrityLevel = 0x200,
        BasicInfoFlags = 0x400,
        UserIdentityFlags = 0x800,
        FilterFlags = 0x1000,
        PublishedPrograms = 0x2000,
        AppPackageId = 0x4000,
        CoreClrPublishedProgram = 0x8000,
        ParentId = 0x10000,
        AppPool = 0x20000,
    }

    #[repr(C)]
    struct NativeDkmSerializedProcessInfo____ExtendedData {

        pub UptimeInSeconds: i64,
        pub NumberOfProcessors: i32,
    }

    #[repr(C)]
    struct NativeDkmSerializedProcessInfo {

        BaseClass: crate::NativeXapiDataContainer,
        pub Connection: *mut std::ffi::c_void,
        pub Path: *mut std::ffi::c_void,
        pub ProcessName: *mut std::ffi::c_void,
        pub ProcessStartArguments: *mut std::ffi::c_void,
        pub BaseDebugMonitorId: crate::GUID,
        ExtendedData: *const std::ffi::c_void,
    }

    #[repr(C)]
    struct NativeDkmStandardRemoteTransportConnection {

        BaseClass: crate::DefaultPort::DkmTransportConnection,
        pub AuthenticationMode: crate::DefaultPort::DkmRemoteAuthenticationMode,
        pub ProxyServer: *mut std::ffi::c_void,
    }

    #[repr(C)]
    struct NativeDkmSystemInformation____ExtendedData {

        pub MinidumpFlags: u32,
        pub SystemDirectory: *mut std::ffi::c_void,
        pub SystemWow64Directory: *mut std::ffi::c_void,
        pub DeviceInfo: *mut std::ffi::c_void,
    }

    #[repr(C)]
    struct NativeDkmSystemInformation {

        BaseClass: crate::NativeXapiDispatcherObjectBase,
        pub ProcessorArchitecture: u16,
        pub PageSize: u32,
        pub OperatingSystemVersion: u32,
        pub SuiteMask: u16,
        pub Flags: crate::DefaultPort::DkmSystemInformationFlags,
        pub ProcessorFeatures: crate::DefaultPort::DkmProcessorFeatures,
        ExtendedData: *const std::ffi::c_void,
    }

    #[repr(u32)]
    pub enum DkmSystemInformationFlags {

        Default = 0x0,
        Is64Bit = 0x1,
        DumpFile = 0x2,
        CanAccessFileSystem = 0x4,
        CoreSystem = 0x8,
        LaunchedInChamber = 0x10,
        ProcessSnapshot = 0x20,
        NoExecute = 0x40,
        CanReverse = 0x80,
    }

    #[repr(C)]
    struct NativeDkmTerminalStartInfo {

        BaseClass: crate::NativeXapiDispatcherObjectBase,
        pub Connection: *mut std::ffi::c_void,
        pub Title: *mut std::ffi::c_void,
        pub ExecutablePath: *mut std::ffi::c_void,
        pub Arguments: *mut std::ffi::c_void,
    }

    #[repr(C)]
    struct NativeDkmTransportConnection____ExtendedData {

        pub ProtocolVersion: crate::DkmApiVersion,
        pub DebuggerCpuArchitecture: crate::DefaultPort::DkmDebuggerCpuArchitecture,
    }

    #[repr(C)]
    struct NativeDkmTransportConnection {

        BaseClass: crate::NativeXapiDataContainer,
        pub UniqueId: crate::GUID,
        pub Qualifier: *mut std::ffi::c_void,
        pub Kind: crate::GUID,
        pub Flags: crate::DefaultPort::DkmTransportConnectionFlags,
        ExtendedData: *const std::ffi::c_void,
        CausalityConnectionCollection0: *const std::ffi::c_void,
        DeploymentCommandCollection0: *const std::ffi::c_void,
        DeploymentSessionCollection0: *const std::ffi::c_void,
        FileTransferStreamCollection0: *const std::ffi::c_void,
        LiveProcessCollection3: *const std::ffi::c_void,
        ProcessCollection0: *const std::ffi::c_void,
        ProcessLaunchNotifyListenerCollection0: *const std::ffi::c_void,
        RequestCollection0: *const std::ffi::c_void,
    }

    #[repr(u32)]
    pub enum DkmTransportConnectionFlags {

        LocalComputer = 0x1,
        MarshallingRequired = 0x2,
        DefaultConnectionToTarget = 0x4,
    }

    #[repr(C)]
    struct NativeDkmWorkerProcessConnection {

        BaseClass: crate::NativeXapiDataContainer,
        pub UniqueId: crate::GUID,
        pub Qualifier: *mut std::ffi::c_void,
        pub Flags: crate::DefaultPort::DkmTransportConnectionFlags,
        pub ProtocolVersion: crate::DkmApiVersion,
    }

} // end of mod DefaultPort

pub mod Clr {

    #[repr(C)]
    struct NativeDkmActiveStatement {

        BaseClass: crate::NativeXapiDispatcherObjectBase,
        pub Id: u32,
        pub Thread: *mut std::ffi::c_void,
        pub InstructionSymbol: *mut std::ffi::c_void,
        pub InstructionAddress: *mut std::ffi::c_void,
        pub ExecutingMethodVersion: u32,
        pub Flags: crate::Clr::DkmActiveStatementFlags,
    }

    #[repr(u32)]
    pub enum DkmActiveStatementFlags {

        None = 0x0,
        Leaf = 0x1,
        MidStatement = 0x2,
        NonUser = 0x4,
        MethodUpToDate = 0x8,
    }

    #[repr(C)]
    struct NativeDkmActiveStatementUpdate {

        BaseClass: crate::NativeXapiDispatcherObjectBase,
        pub ThreadId: crate::GUID,
        pub MethodId: crate::Clr::DkmClrMethodId,
        pub ILOffset: u32,
        pub NewSpan: crate::Symbols::DkmTextSpan,
    }

    #[repr(C)]
    struct NativeDkmClrAlias {

        BaseClass: crate::NativeXapiDispatcherObjectBase,
        pub Kind: crate::Clr::DkmClrAliasKind,
        pub Name: *mut std::ffi::c_void,
        pub FullName: *mut std::ffi::c_void,
        pub Type: *mut std::ffi::c_void,
        pub CustomTypeInfoPayloadTypeId: crate::GUID,
        pub CustomTypeInfoPayload: *mut std::ffi::c_void,
    }

    #[repr(u32)]
    pub enum DkmClrAliasKind {

        Exception = 0,
        StowedException = 1,
        ReturnValue = 2,
        Variable = 3,
        ObjectId = 4,
    }

    #[repr(C)]
    struct NativeDkmClrAppDomain {

        BaseClass: crate::NativeXapiDataContainer,
        pub UniqueId: crate::GUID,
        pub Id: u32,
        pub RuntimeInstance: *mut std::ffi::c_void,
        pub Name: *mut std::ffi::c_void,
    }

    #[repr(u32)]
    pub enum DkmClrAsyncMethodLocation {

        None = 0x0,
        FirstStatement = 0x1,
        NonAwaitStatement = 0x2,
        BeforeYield = 0x4,
        AtYield = 0x8,
        LastStatement = 0x10,
    }

    #[repr(C)]
    pub struct DkmClrAwaitExpressionInfo {
        pub YieldOffset: u32,
        pub ResumeOffset: u32,
        pub ResumeMethodToken: u32,
    }

    #[repr(u32)]
    pub enum DkmClrCastExpressionOptions {

        None = 0x0,
        ConditionalCast = 0x1,
        ParenthesizeArgument = 0x2,
        ParenthesizeEntireExpression = 0x4,
    }

    #[repr(C)]
    struct NativeDkmClrCaughtExceptionInformation {

        BaseClass: crate::NativeXapiDispatcherObjectBase,
        pub Thread: *mut std::ffi::c_void,
        pub FrameStart: u64,
        pub FrameEnd: u64,
        pub InstructionAddress: *mut std::ffi::c_void,
        pub CatchHandlerILOffset: u32,
        pub Name: *mut std::ffi::c_void,
    }

    #[repr(C)]
    struct NativeDkmClrCodePath {

        BaseClass: crate::NativeXapiDispatcherObjectBase,
        pub Name: *mut std::ffi::c_void,
        pub MetadataName: *mut std::ffi::c_void,
        pub ReturnType: *mut std::ffi::c_void,
        pub Kind: crate::Clr::DkmClrCodePathKind,
        pub AdditionalData: *mut std::ffi::c_void,
    }

    #[repr(u32)]
    pub enum DkmClrCodePathKind {

        Method = 0,
        Constructor = 1,
        Property = 2,
        Cast = 3,
    }

    #[repr(u32)]
    pub enum DkmClrDebuggingServicesId {

        OutOfProcessPipeline = 0,
        DesktopClrV4 = 1,
        DesktopClrV2 = 2,
        SilverlightWindows = 3,
        SilverlightMac = 4,
        DevicesClr = 5,
        CoreSystemClr = 6,
    }

    #[repr(C)]
    struct NativeDkmClrExceptionInformation {

        BaseClass: crate::Exceptions::DkmExceptionInformation,
    }

    #[repr(u32)]
    pub enum DkmClrHeaderStatus {

        NativeBinary = 0,
        MixedModeBinary = 1,
        ManagedOnlyBinary = 2,
        NGenBinary = 3,
    }

    #[repr(C)]
    struct NativeDkmClrInstructionAddress {

        BaseClass: crate::DkmInstructionAddress,
        pub MethodId: crate::Clr::DkmClrMethodId,
        pub NativeOffset: u32,
        pub ILOffset: u32,
        ExtendedData: *const std::ffi::c_void,
    }

    #[repr(C)]
    struct NativeDkmClrInstructionSymbol {

        BaseClass: crate::Symbols::DkmInstructionSymbol,
        pub MethodId: crate::Clr::DkmClrMethodId,
        pub ILOffset: u32,
        ExtendedData: *const std::ffi::c_void,
    }

    #[repr(C)]
    struct NativeDkmClrLocalConstant {

        BaseClass: crate::NativeXapiDispatcherObjectBase,
        pub Module: *mut std::ffi::c_void,
        pub Name: *mut std::ffi::c_void,
        pub Value: *mut std::ffi::c_void,
        pub AdditionalData: *mut std::ffi::c_void,
    }

    #[repr(C)]
    struct NativeDkmClrLocalVariable {

        BaseClass: crate::NativeXapiDispatcherObjectBase,
        pub Module: *mut std::ffi::c_void,
        pub Name: *mut std::ffi::c_void,
        pub Attributes: u32,
        pub Slot: u32,
        pub AdditionalData: *mut std::ffi::c_void,
    }

    #[repr(C)]
    pub struct DkmClrMethodId {
        pub Token: u32,
        pub Version: u32,
    }

    #[repr(C)]
    pub struct DkmClrMethodScopeData {
        pub ILRange: crate::Clr::DkmILRange,
        pub ParentScope: i32,
        pub LocalVariables: *mut std::ffi::c_void,
        pub LocalConstants: *mut std::ffi::c_void,
        pub Namespaces: *mut std::ffi::c_void,
    }

    #[repr(u32)]
    pub enum DkmClrModuleFlags {

        None = 0x0,
        Dynamic = 0x1,
        RuntimeModule = 0x2,
        FullyTrusted = 0x4,
    }

    #[repr(C)]
    struct NativeDkmClrModuleInstance____ExtendedData {

        pub ILImageSize: u32,
    }

    #[repr(C)]
    struct NativeDkmClrModuleInstance {

        BaseClass: crate::DkmModuleInstance,
        pub Mvid: crate::GUID,
        pub ClrFlags: crate::Clr::DkmClrModuleFlags,
        pub AppDomain: *mut std::ffi::c_void,
        ExtendedData: *const std::ffi::c_void,
    }

    #[repr(C)]
    pub struct DkmClrNativeCodeMapEntry {
        pub NativeAddress: u64,
        pub NativeSize: u32,
        pub NativeOffset: u32,
        pub ILOffset: u32,
    }

    #[repr(C)]
    struct NativeDkmClrRuntimeInstance {

        BaseClass: crate::DkmRuntimeInstance,
        pub CORSystemDirectory: *mut std::ffi::c_void,
        pub RuntimeVersion: *mut std::ffi::c_void,
        ExtendedData: *const std::ffi::c_void,
        AppDomainCollection0: *const std::ffi::c_void,
        AppDomainCollection1: *const std::ffi::c_void,
    }

    #[repr(C)]
    pub struct DkmClrSequencePoint {
        pub ILOffset: u32,
        pub Length: u32,
        pub Span: crate::Symbols::DkmTextSpan,
    }

    #[repr(C)]
    struct NativeDkmClrType____ExtendedData {

        pub ElementType: *mut std::ffi::c_void,
        pub CorElementType: u32,
        pub ArrayRank: u32,
        pub SyntheticMvid: crate::GUID,
        pub FunctionPointerReturnType: *mut std::ffi::c_void,
        pub FunctionPointerArgumentTypes: *mut std::ffi::c_void,
    }

    #[repr(C)]
    struct NativeDkmClrType {

        BaseClass: crate::NativeXapiDispatcherObjectBase,
        pub ModuleInstance: *mut std::ffi::c_void,
        pub Token: u32,
        pub GenericArguments: *mut std::ffi::c_void,
        ExtendedData: *const std::ffi::c_void,
    }

    #[repr(u32)]
    pub enum DkmEncAvailableStatus {

        Available = 0,
        Interop = 1,
        SqlClr = 2,
        Minidump = 3,
        Attach = 4,
        ModuleNotLoaded = 5,
        ModuleReloaded = 6,
        InRunMode = 7,
        NotBuilt = 8,
        EngineMetricFalse = 9,
        NotSupportedForClr64Version = 10,
        NotAllowedForModule = 11,
        Optimized = 12,
        DomainNeutralAssembly = 13,
        ReflectionAssembly = 14,
        IntelliTrace = 15,
        NotAllowedForRuntime = 16,
    }

    #[repr(C)]
    struct NativeDkmExceptionRegionUpdate {

        BaseClass: crate::NativeXapiDispatcherObjectBase,
        pub MethodId: crate::Clr::DkmClrMethodId,
        pub NewSpan: crate::Symbols::DkmTextSpan,
        pub Delta: u32,
    }

    #[repr(u32)]
    pub enum DkmILInterpreterOptions {

        ResolveVirtual = 0x1,
    }

    #[repr(C)]
    struct NativeDkmILInterpreterPrimitiveValue {

        BaseClass: crate::Clr::DkmILInterpreterValue,
        pub Value: *mut std::ffi::c_void,
    }

    #[repr(C)]
    struct NativeDkmILInterpreterReferenceValue {

        BaseClass: crate::Clr::DkmILInterpreterValue,
        pub Value: *mut std::ffi::c_void,
    }

    #[repr(u32)]
    pub enum DkmILInterpreterValue_Tag {

        PrimitiveValue = 0,
        ReferenceValue = 1,
    }

    #[repr(C)]
    struct NativeDkmILInterpreterValue {

        BaseClass: crate::NativeXapiDispatcherObjectBase,
        pub TagValue: crate::Clr::DkmILInterpreterValue_Tag,
        pub RuntimeInstance: *mut std::ffi::c_void,
        ExtendedData: *const std::ffi::c_void,
    }

    #[repr(C)]
    pub struct DkmILRange {
        pub StartOffset: u32,
        pub EndOffset: u32,
    }

    #[repr(C)]
    struct NativeDkmManagedEncUpdates {

        BaseClass: crate::NativeXapiDispatcherObjectBase,
        pub Updates: *mut std::ffi::c_void,
    }

    #[repr(C)]
    pub struct DkmManagedHeapObjectInfo {
        pub Address: u64,
        pub Size: u64,
        pub TypeId: crate::Clr::DkmManagedTypeId,
    }

    #[repr(C)]
    pub struct DkmManagedHeapRootInfo {
        pub Address: u64,
        pub RootType: u32,
        pub RootName: *mut std::ffi::c_void,
        pub ExtraData: u64,
    }

    #[repr(C)]
    struct NativeDkmManagedHeapSampler____ExtendedData {

        pub WorkerConnection: *mut std::ffi::c_void,
    }

    #[repr(C)]
    struct NativeDkmManagedHeapSampler {

        BaseClass: crate::NativeXapiDataContainer,
        pub UniqueId: crate::GUID,
        pub RuntimeInstance: *mut std::ffi::c_void,
        ExtendedData: *const std::ffi::c_void,
    }

    #[repr(C)]
    pub struct DkmManagedHeapSegmentInfo {
        pub StartAddress: u64,
        pub EndAddress: u64,
        pub Generation: u8,
    }

    #[repr(C)]
    pub struct DkmManagedHeapTypeInfo {
        pub Name: *mut std::ffi::c_void,
        pub TotalCount: u32,
        pub TotalSize: u64,
    }

    #[repr(C)]
    struct NativeDkmManagedHeapWalker {

        BaseClass: crate::NativeXapiDataContainer,
        pub UniqueId: crate::GUID,
        pub RuntimeInstance: *mut std::ffi::c_void,
    }

    #[repr(C)]
    struct NativeDkmManagedModuleUpdate {

        BaseClass: crate::NativeXapiDispatcherObjectBase,
        pub ModuleId: crate::GUID,
        pub ILDelta: *mut std::ffi::c_void,
        pub MetadataDelta: *mut std::ffi::c_void,
        pub PdbDelta: *mut std::ffi::c_void,
        pub SequencePoints: *mut std::ffi::c_void,
        pub UpdatedMethods: *mut std::ffi::c_void,
        pub ActiveStatements: *mut std::ffi::c_void,
        pub ExceptionRegions: *mut std::ffi::c_void,
    }

    #[repr(C)]
    pub struct DkmManagedObjectReferenceInfo {
        pub From: u64,
        pub To: u64,
    }

    #[repr(C)]
    struct NativeDkmManagedReturnStackFrame____ExtendedData {

        pub TaskId: u32,
        pub Description: *mut std::ffi::c_void,
    }

    #[repr(C)]
    struct NativeDkmManagedReturnStackFrame {

        BaseClass: crate::NativeXapiDispatcherObjectBase,
        pub Thread: *mut std::ffi::c_void,
        pub Flags: crate::CallStack::DkmStackWalkFrameFlags,
        pub Method: crate::Clr::DkmClrMethodId,
        pub ModuleInstance: *mut std::ffi::c_void,
        pub AwaitIndex: u32,
        pub AsyncStackWalkContext: *mut std::ffi::c_void,
        pub Data: *mut std::ffi::c_void,
        ExtendedData: *const std::ffi::c_void,
    }

    #[repr(C)]
    struct NativeDkmManagedReturnValueContext {

        BaseClass: crate::NativeXapiDispatcherObjectBase,
        pub Thread: *mut std::ffi::c_void,
        pub Runtime: *mut std::ffi::c_void,
        pub Address: *mut std::ffi::c_void,
        pub Name: *mut std::ffi::c_void,
        pub FullName: *mut std::ffi::c_void,
    }

    #[repr(C)]
    struct NativeDkmManagedReturnValueCopy {

        BaseClass: crate::Clr::DkmManagedReturnValueInfo,
        pub CorElementType: u32,
        pub Size: u32,
        pub Address: u64,
        pub ValueBuffer: *mut std::ffi::c_void,
    }

    #[repr(u32)]
    pub enum DkmManagedReturnValueInfo_Tag {

        ManagedReturnValueReference = 0,
        ManagedReturnValueCopy = 1,
    }

    #[repr(C)]
    struct NativeDkmManagedReturnValueInfo {

        BaseClass: crate::NativeXapiDispatcherObjectBase,
        pub TagValue: crate::Clr::DkmManagedReturnValueInfo_Tag,
        pub CorType: *mut std::ffi::c_void,
        ExtendedData: *const std::ffi::c_void,
    }

    #[repr(C)]
    struct NativeDkmManagedReturnValueReference {

        BaseClass: crate::Clr::DkmManagedReturnValueInfo,
        pub CorValue: *mut std::ffi::c_void,
    }

    #[repr(C)]
    pub struct DkmManagedTypeId {
        pub Token1: u64,
        pub Token2: u64,
    }

    #[repr(C)]
    pub struct DkmManagedTypeInfo {
        pub TypeId: crate::Clr::DkmManagedTypeId,
        pub TotalSize: u64,
    }

    #[repr(u32)]
    pub enum DkmMetadataStatus {

        NotDetermined = 0,
        Present = 1,
        NotPresent = 2,
    }

    #[repr(u32)]
    pub enum DkmNonUserCodeFlags {

        None = 0x0,
        HiddenAttribute = 0x1,
        StepThroughAttribute = 0x2,
        NonUserCodeAttribute = 0x4,
        OptimizedAssembly = 0x8,
    }

    #[repr(C)]
    struct NativeDkmSequencePointsUpdate {

        BaseClass: crate::NativeXapiDispatcherObjectBase,
        pub FileName: *mut std::ffi::c_void,
        pub LineUpdates: *mut std::ffi::c_void,
    }

    #[repr(C)]
    struct NativeDkmSourceLineUpdate {

        BaseClass: crate::NativeXapiDispatcherObjectBase,
        pub OldLine: u32,
        pub NewLine: u32,
    }

    pub mod NativeCompilation {

        #[repr(C)]
        struct NativeDkmClrNcContainerModuleInstance {

            BaseClass: crate::DkmModuleInstance,
            pub AppDomain: *mut std::ffi::c_void,
        }

        #[repr(C)]
        struct NativeDkmClrNcInstanceFieldSymbol {

            BaseClass: crate::NativeXapiDispatcherObjectBase,
            pub Name: *mut std::ffi::c_void,
            pub Size: u32,
            pub Offset: u32,
        }

        #[repr(C)]
        struct NativeDkmClrNcInstructionAddress {

            BaseClass: crate::Clr::DkmClrInstructionAddress,
            pub ContainerModule: *mut std::ffi::c_void,
            pub GenericParameters: *mut std::ffi::c_void,
            pub ReferenceToken: u32,
        }

        #[repr(C)]
        struct NativeDkmClrNcInstructionSymbol {

            BaseClass: crate::Clr::DkmClrInstructionSymbol,
            pub LogicalMvid: crate::GUID,
            pub NativeOffset: u32,
            pub GenericParameters: *mut std::ffi::c_void,
            pub ReferenceToken: u32,
        }

        #[repr(C)]
        struct NativeDkmClrNcModuleInstance {

            BaseClass: crate::Clr::DkmClrModuleInstance,
            pub ContainerModule: *mut std::ffi::c_void,
            pub Index: u32,
        }

        #[repr(C)]
        struct NativeDkmClrNcRuntimeInstance {

            BaseClass: crate::Clr::DkmClrRuntimeInstance,
        }

    } // end of mod NativeCompilation

    pub mod Cpp {

        #[repr(C)]
        struct NativeDkmMCppILLocalVariableSymbol {

            BaseClass: crate::Clr::Cpp::DkmMCppLocalVariableSymbol,
            pub IsParameter: bool,
            pub Slot: u32,
        }

        #[repr(u32)]
        pub enum DkmMCppLocalVariableSymbol_Tag {

            ILLocalVariableSymbol = 0,
            StaticLocalVariableSymbol = 1,
        }

        #[repr(C)]
        struct NativeDkmMCppLocalVariableSymbol {

            BaseClass: crate::NativeXapiDispatcherObjectBase,
            pub TagValue: crate::Clr::Cpp::DkmMCppLocalVariableSymbol_Tag,
            pub Name: *mut std::ffi::c_void,
            ExtendedData: *const std::ffi::c_void,
        }

        #[repr(C)]
        struct NativeDkmMCppMethodScope {

            BaseClass: crate::NativeXapiDispatcherObjectBase,
            pub Method: crate::Clr::DkmClrMethodId,
            pub Module: *mut std::ffi::c_void,
            pub ILRange: crate::Clr::DkmILRange,
            pub Parent: *mut std::ffi::c_void,
            pub Variables: *mut std::ffi::c_void,
        }

        #[repr(C)]
        struct NativeDkmMCppStaticLocalVariableSymbol {

            BaseClass: crate::Clr::Cpp::DkmMCppLocalVariableSymbol,
            pub RVA: u32,
            pub Type: *mut std::ffi::c_void,
        }

    } // end of mod Cpp

} // end of mod Clr

pub mod Native {

    #[repr(C)]
    struct NativeDkmCppExceptionInformation {

        BaseClass: crate::Exceptions::DkmExceptionInformation,
        pub ExceptionObjectPointer: u64,
        pub Address: u64,
        pub WinRTExceptionInfo: *mut std::ffi::c_void,
    }

    #[repr(C)]
    struct NativeDkmCppWinRTExceptionInformation____ExtendedData {

        pub ErrorInfoAddress: u64,
        pub CapturedStack: *mut std::ffi::c_void,
    }

    #[repr(C)]
    struct NativeDkmCppWinRTExceptionInformation {

        BaseClass: crate::NativeXapiDispatcherObjectBase,
        pub Description: *mut std::ffi::c_void,
        pub RestrictedDescription: *mut std::ffi::c_void,
        pub RestrictedReference: *mut std::ffi::c_void,
        pub RestrictedCapabilitySid: *mut std::ffi::c_void,
        pub ExceptionHR: crate::HRESULT,
        ExtendedData: *const std::ffi::c_void,
    }

    #[repr(C)]
    struct NativeDkmNativeAddressMetadata {

        BaseClass: crate::NativeXapiDispatcherObjectBase,
        pub AddressType: crate::Native::DkmNativeAddressType,
        pub StepType: crate::Native::DkmNativeAddressStepType,
        pub AddressTypeLength: u32,
    }

    #[repr(u32)]
    pub enum DkmNativeAddressStepType {

        None = 0,
        ContinueStep = 1,
    }

    #[repr(u32)]
    pub enum DkmNativeAddressType {

        Native = 0,
        NativeNoSource = 1,
        Thunk = 2,
        Prolog = 3,
        Epilog = 4,
        Trampoline = 5,
        NonStopStepIntoCode = 6,
        NlgReturn = 7,
        Custom = 8,
        NoNativeSymbols = 9,
        NativeNoStepInto = 10,
        CompilerGeneratedGlueCode = 11,
        CoroutineRamp = 12,
    }

    #[repr(C)]
    struct NativeDkmNativeDwarfRuntimeInstance {

        BaseClass: crate::DkmRuntimeInstance,
    }

    #[repr(C)]
    struct NativeDkmNativeInstructionAddress {

        BaseClass: crate::DkmInstructionAddress,
        pub RVA: u32,
    }

    #[repr(C)]
    struct NativeDkmNativeInstructionSymbol {

        BaseClass: crate::Symbols::DkmInstructionSymbol,
        pub RVA: u32,
    }

    #[repr(C)]
    struct NativeDkmNativeModuleInstance {

        BaseClass: crate::DkmModuleInstance,
        pub ClrHeaderStatus: crate::Clr::DkmClrHeaderStatus,
    }

    #[repr(u32)]
    pub enum DkmNativeNonUserCodeReason {

        None = 0,
        NoSymbols = 1,
        NoSourceInfo = 2,
        Function = 3,
        File = 4,
        Module = 5,
    }

    #[repr(C)]
    struct NativeDkmNativeRuntimeInstance {

        BaseClass: crate::DkmRuntimeInstance,
    }

    #[repr(C)]
    struct NativeDkmOpenEnclaveRuntimeInstance {

        BaseClass: crate::DkmRuntimeInstance,
    }

    #[repr(C)]
    struct NativeDkmWin32ExceptionInformation {

        BaseClass: crate::Exceptions::DkmExceptionInformation,
        pub ExceptionFlags: u32,
        pub ParentExceptionRecordAddress: u64,
        pub Address: u64,
        pub ExceptionParameters: *mut std::ffi::c_void,
    }

    pub mod Cpp {

        #[repr(u32)]
        pub enum DkmCompiledNativeCppExpression_Tag {

            CompiledNativeCppValueExpression = 0,
            CompiledNativeCppTypeExpression = 1,
        }

        #[repr(C)]
        struct NativeDkmCompiledNativeCppExpression {

            BaseClass: crate::NativeXapiDispatcherObjectBase,
            pub TagValue: crate::Native::Cpp::DkmCompiledNativeCppExpression_Tag,
            ExtendedData: *const std::ffi::c_void,
        }

        #[repr(C)]
        struct NativeDkmCompiledNativeCppTypeExpression {

            BaseClass: crate::Native::Cpp::DkmCompiledNativeCppExpression,
            pub Type: *mut std::ffi::c_void,
        }

        #[repr(C)]
        struct NativeDkmCompiledNativeCppValueExpression {

            BaseClass: crate::Native::Cpp::DkmCompiledNativeCppExpression,
            pub InspectionQuery: *mut std::ffi::c_void,
            pub Type: *mut std::ffi::c_void,
            pub IsLValue: bool,
            pub Category: crate::Evaluation::DkmEvaluationResultCategory,
            pub Access: crate::Evaluation::DkmEvaluationResultAccessType,
            pub Storage: crate::Evaluation::DkmEvaluationResultStorageType,
            pub TypeModifierFlags: crate::Evaluation::DkmEvaluationResultTypeModifierFlags,
        }

        #[repr(C)]
        struct NativeDkmNativeCppArrayType {

            BaseClass: crate::Native::Cpp::DkmNativeCppType,
            pub ElementType: *mut std::ffi::c_void,
            pub ElementCount: u32,
        }

        #[repr(u32)]
        pub enum DkmNativeCppCVQualifiers {

            None = 0x0,
            Const = 0x1,
            Volatile = 0x2,
        }

        #[repr(C)]
        struct NativeDkmNativeCppCompilationError {

            BaseClass: crate::NativeXapiDispatcherObjectBase,
            pub FailureReason: crate::Native::Cpp::DkmNativeCppCompilationFailureReason,
            pub Message: *mut std::ffi::c_void,
        }

        #[repr(u32)]
        pub enum DkmNativeCppCompilationFailureReason {

            UndefinedSymbol = 0,
            IllegalSideEffect = 1,
            Other = 2,
        }

        #[repr(C)]
        struct NativeDkmNativeCppEnumType {

            BaseClass: crate::Native::Cpp::DkmNativeCppType,
            pub UnderlyingType: *mut std::ffi::c_void,
            pub QualifiedName: *mut std::ffi::c_void,
            pub Module: *mut std::ffi::c_void,
            pub Values: *mut std::ffi::c_void,
        }

        #[repr(C)]
        struct NativeDkmNativeCppEnumValue {

            BaseClass: crate::NativeXapiDispatcherObjectBase,
            pub Name: *mut std::ffi::c_void,
            pub Value: u64,
        }

        #[repr(C)]
        struct NativeDkmNativeCppFunctionType {

            BaseClass: crate::Native::Cpp::DkmNativeCppType,
            pub ReturnType: *mut std::ffi::c_void,
            pub ArgumentTypes: *mut std::ffi::c_void,
            pub CallingConvention: crate::Evaluation::IL::DkmILCallingConvention,
            pub IsEllipsis: bool,
            pub ObjectPointerType: *mut std::ffi::c_void,
        }

        #[repr(C)]
        struct NativeDkmNativeCppInspectionSession {

            BaseClass: crate::NativeXapiDataContainer,
            pub InspectionSession: *mut std::ffi::c_void,
            pub UniqueId: crate::GUID,
        }

        #[repr(C)]
        struct NativeDkmNativeCppNamedExpressionParameter {

            BaseClass: crate::NativeXapiDispatcherObjectBase,
            pub Name: *mut std::ffi::c_void,
            pub Type: *mut std::ffi::c_void,
        }

        #[repr(C)]
        struct NativeDkmNativeCppPointerType {

            BaseClass: crate::Native::Cpp::DkmNativeCppType,
            pub ElementType: *mut std::ffi::c_void,
        }

        #[repr(C)]
        struct NativeDkmNativeCppPrimitiveType {

            BaseClass: crate::Native::Cpp::DkmNativeCppType,
            pub Kind: crate::Native::Cpp::DkmNativeCppPrimitiveTypeKind,
        }

        #[repr(u32)]
        pub enum DkmNativeCppPrimitiveTypeKind {

            Unknown = 0,
            Char = 1,
            UnsignedChar = 2,
            Short = 3,
            UnsignedShort = 4,
            Int = 5,
            UnsignedInt = 6,
            Long = 7,
            UnsignedLong = 8,
            Int64 = 9,
            UnsignedInt64 = 10,
            Bool = 11,
            WCharT = 12,
            Char16T = 13,
            Char32T = 14,
            Float = 15,
            Double = 16,
            HRESULT = 17,
            Void = 18,
            Char8T = 19,
        }

        #[repr(C)]
        struct NativeDkmNativeCppReferenceType {

            BaseClass: crate::Native::Cpp::DkmNativeCppType,
            pub ElementType: *mut std::ffi::c_void,
            pub IsRValueReference: bool,
        }

        #[repr(u32)]
        pub enum DkmNativeCppType_Tag {

            PrimitiveType = 0,
            PointerType = 1,
            ReferenceType = 2,
            ArrayType = 3,
            EnumType = 4,
            UserDefinedType = 5,
            FunctionType = 6,
        }

        #[repr(C)]
        struct NativeDkmNativeCppType {

            BaseClass: crate::NativeXapiDataContainer,
            pub TagValue: crate::Native::Cpp::DkmNativeCppType_Tag,
            pub InspectionSession: *mut std::ffi::c_void,
            pub Id: u32,
            pub Size: u32,
            pub Qualifiers: crate::Native::Cpp::DkmNativeCppCVQualifiers,
            ExtendedData: *const std::ffi::c_void,
        }

        #[repr(C)]
        struct NativeDkmNativeCppUserDefinedType {

            BaseClass: crate::Native::Cpp::DkmNativeCppType,
            pub QualifiedName: *mut std::ffi::c_void,
            pub Module: *mut std::ffi::c_void,
        }

    } // end of mod Cpp

} // end of mod Native

pub mod Script {

    #[repr(C)]
    struct NativeDkmScriptBlockMappingInfo {

        BaseClass: crate::NativeXapiDispatcherObjectBase,
        pub CodeText: *mut std::ffi::c_void,
        pub TextSpan: crate::Symbols::DkmTextSpan,
    }

    #[repr(C)]
    struct NativeDkmScriptDocument____ExtendedData {

        pub ContentType: crate::Script::DkmScriptDocumentContentType,
        pub EmbeddedDocumentKind: crate::Script::DkmScriptEmbeddedDocumentKind,
        pub JmcState: crate::Script::DkmScriptDocumentJmcState,
    }

    #[repr(C)]
    struct NativeDkmScriptDocument {

        BaseClass: crate::Script::DkmScriptDocumentTreeNode,
        pub Module: *mut std::ffi::c_void,
        pub Url: *mut std::ffi::c_void,
        pub FilePath: *mut std::ffi::c_void,
        pub Flags: crate::Script::DkmScriptDocumentFlags,
        pub SourceProjectItem: *mut std::ffi::c_void,
        ExtendedData: *const std::ffi::c_void,
    }

    #[repr(u32)]
    pub enum DkmScriptDocumentContentType {

        Unknown = 0,
        Script = 1,
        Html = 2,
    }

    #[repr(u32)]
    pub enum DkmScriptDocumentFlags {

        None = 0x0,
        AggregateDocument = 0x1,
    }

    #[repr(u32)]
    pub enum DkmScriptDocumentJmcState {

        Unsure = 0,
        MyCode = 1,
        LibraryCode = 2,
        UnrelatedCode = 3,
    }

    #[repr(C)]
    struct NativeDkmScriptDocumentTreeNode {

        BaseClass: crate::NativeXapiDataContainer,
        pub RuntimeInstance: *mut std::ffi::c_void,
        pub Parent: *mut std::ffi::c_void,
        pub UniqueId: crate::GUID,
        pub Title: *mut std::ffi::c_void,
        ExtendedData: *const std::ffi::c_void,
    }

    #[repr(u32)]
    pub enum DkmScriptEmbeddedDocumentKind {

        None = 0,
        EvalCode = 1,
        FunctionCode = 2,
        ScriptBlock = 3,
    }

    #[repr(C)]
    struct NativeDkmScriptInstructionAddress {

        BaseClass: crate::DkmInstructionAddress,
        pub Document: *mut std::ffi::c_void,
        pub Revision: u32,
        pub StartIndex: u32,
        pub StatementLength: u32,
        pub AdditionalData: *mut std::ffi::c_void,
    }

    #[repr(C)]
    struct NativeDkmScriptInstructionSymbol {

        BaseClass: crate::Symbols::DkmInstructionSymbol,
        pub Document: *mut std::ffi::c_void,
        pub Revision: u32,
        pub StartIndex: u32,
        pub StatementLength: u32,
        pub AdditionalData: *mut std::ffi::c_void,
    }

    #[repr(C)]
    struct NativeDkmScriptRuntimeInstance____ExtendedData {

        pub IsEdgeHtmlDll: bool,
        pub ScriptHostVersion: u64,
    }

    #[repr(C)]
    struct NativeDkmScriptRuntimeInstance {

        BaseClass: crate::DkmRuntimeInstance,
        pub LoadOrderIndex: u32,
        ExtendedData: *const std::ffi::c_void,
    }

    #[repr(C)]
    struct NativeDkmScriptSourceProjectItem {

        BaseClass: crate::NativeXapiDispatcherObjectBase,
        pub Path: *mut std::ffi::c_void,
        pub IsGenerated: bool,
    }

    #[repr(u32)]
    pub enum DkmScriptSymbolNextSteppingAction {

        CompleteStep = 0,
        SkipStatement = 1,
        SkipMethodCall = 2,
        SkipCurrentMethod = 3,
    }

} // end of mod Script

pub mod GPU {

    #[repr(u32)]
    pub enum DkmComputeKernelModel {

        Flat = 0,
        Tile = 1,
        HLSL = 2,
    }

    #[repr(C)]
    pub struct DkmComputeProperty {
        pub Name: *mut std::ffi::c_void,
        pub Value: *mut std::ffi::c_void,
    }

    #[repr(C)]
    pub struct DkmComputeThreadInfo {
        pub ThreadCount: u32,
        pub VectorId: u32,
        pub ThreadGroupId: u64,
        pub ThreadId: u64,
        pub InstructionPointer: u64,
        pub ThreadState: crate::GPU::DkmComputeThreadState,
        pub FlaggedState: bool,
        pub FrozenState: bool,
    }

    #[repr(u32)]
    pub enum DkmComputeThreadState {

        Unknown = 0x0,
        Active = 0x1,
        Divergent = 0x2,
        Blocked = 0x4,
        Unused = 0x8,
        NotStarted = 0x10,
        Completed = 0x20,
    }

    #[repr(u32)]
    pub enum DkmGPUAddressType {

        None = 0x1,
        FunctionCall = 0x2,
        NoStepInto = 0x4,
    }

    #[repr(u32)]
    pub enum DkmGPUBreakpointBehaviorFlags {

        None = 0,
        BreakOncePerWarp = 1,
        BreakForEveryThread = 2,
        BreakOnFirstDefaultWarp = 3,
    }

    #[repr(C)]
    struct NativeDkmGPUComputeKernel {

        BaseClass: crate::NativeXapiDataContainer,
        pub DispatchId: u32,
        pub GPUDevice: u64,
        pub GPUShader: u64,
        pub GPUShaderDispatch: u64,
        pub GroupDimensions: *mut std::ffi::c_void,
        pub NumberOfGroups: u64,
        pub ThreadDimensions: *mut std::ffi::c_void,
        pub NumberOfThreads: u32,
        pub UniqueId: crate::GUID,
        pub Process: *mut std::ffi::c_void,
    }

    #[repr(C)]
    struct NativeDkmGPUComputeThread____ExtendedData {

        pub NativeThread: *mut std::ffi::c_void,
    }

    #[repr(C)]
    struct NativeDkmGPUComputeThread {

        BaseClass: crate::DkmThread,
        pub GlobalThreadIndex: u64,
        pub ComputeKernel: *mut std::ffi::c_void,
        ExtendedData: *const std::ffi::c_void,
    }

    #[repr(C)]
    struct NativeDkmGPUDataAddress {

        BaseClass: crate::Evaluation::DkmDataAddress,
        pub ComputeThread: *mut std::ffi::c_void,
        pub InstructionPointer: u64,
    }

    #[repr(C)]
    struct NativeDkmGPUMemoryAccessExceptionInformation {

        BaseClass: crate::Exceptions::DkmExceptionInformation,
        pub ConflictingInstructionAddress: u64,
        pub ConflictingThreadGlobalIndex: u64,
    }

    #[repr(C)]
    pub struct DkmGPURegisterDescription {
        pub RegisterType: u32,
        pub RegisterIndex: u32,
        pub RegisterSize: u64,
        pub RegisterValue: *mut std::ffi::c_void,
    }

    #[repr(u32)]
    pub enum DkmHlslThreadIdComponents {

        X = 0x1,
        Y = 0x2,
        Z = 0x4,
    }

    #[repr(u32)]
    pub enum DkmQueryComputeThreadInfoFlags {

        None = 0x0,
        ThreadGroupId = 0x1,
        VectorId = 0x2,
        ThreadId = 0x4,
        ThreadState = 0x8,
        FlaggedState = 0x10,
        InstructionPointer = 0x20,
        FrozenState = 0x40,
    }

    #[repr(C)]
    pub struct DkmWhereClause {
        pub ColumnFlags: crate::GPU::DkmQueryComputeThreadInfoFlags,
        pub Values: crate::GPU::DkmComputeThreadInfo,
    }

} // end of mod GPU

pub mod CustomRuntimes {

    #[repr(C)]
    struct NativeDkmCustomExceptionInformation {

        BaseClass: crate::Exceptions::DkmExceptionInformation,
        pub AdditionalInformation: *mut std::ffi::c_void,
    }

    #[repr(C)]
    struct NativeDkmCustomInstructionAddress {

        BaseClass: crate::DkmInstructionAddress,
        pub EntityId: *mut std::ffi::c_void,
        pub Offset: u64,
        pub AdditionalData: *mut std::ffi::c_void,
    }

    #[repr(C)]
    struct NativeDkmCustomInstructionSymbol {

        BaseClass: crate::Symbols::DkmInstructionSymbol,
        pub EntityId: *mut std::ffi::c_void,
        pub Offset: u64,
        pub AdditionalData: *mut std::ffi::c_void,
    }

    #[repr(C)]
    struct NativeDkmCustomModuleInstance {

        BaseClass: crate::DkmModuleInstance,
    }

    #[repr(C)]
    struct NativeDkmCustomRuntimeInstance {

        BaseClass: crate::DkmRuntimeInstance,
    }

} // end of mod CustomRuntimes

pub mod Disassembly {

    #[repr(C)]
    struct NativeDkmDisassembledInstruction {

        BaseClass: crate::NativeXapiDispatcherObjectBase,
        pub Process: *mut std::ffi::c_void,
        pub InstructionPointer: u64,
        pub InstructionLength: u32,
        pub Address: *mut std::ffi::c_void,
        pub AddressOffset: *mut std::ffi::c_void,
        pub CodeBytes: *mut std::ffi::c_void,
        pub RawOpcode: *mut std::ffi::c_void,
        pub RawOperands: *mut std::ffi::c_void,
        pub FormattedOpcode: *mut std::ffi::c_void,
        pub FormattedOperands: *mut std::ffi::c_void,
        pub Symbol: *mut std::ffi::c_void,
        pub DocumentPosition: *mut std::ffi::c_void,
        pub ByteOffset: u32,
        pub RegisterOperands: *mut std::ffi::c_void,
        pub ValidInstruction: bool,
    }

    #[repr(C)]
    pub struct DkmEffectiveAddress {
        pub EffectiveAddress: u64,
        pub OperandSize: u32,
        pub Flags: crate::Disassembly::DkmEffectiveAddressFlags,
    }

    #[repr(u32)]
    pub enum DkmEffectiveAddressFlags {

        None = 0x0,
        SegmentIsFS = 0x1,
    }

    #[repr(C)]
    pub struct DkmFunctionLabel {
        pub Rva: u64,
        pub Label: *mut std::ffi::c_void,
    }

    #[repr(C)]
    pub struct DkmLinkerFixupRecord {
        pub Type: u16,
        pub Extra: u16,
        pub Rva: u32,
        pub RvaTarget: u32,
    }

} // end of mod Disassembly

pub mod ThreadProperties {

    #[repr(C)]
    pub struct DkmMinidumpThreadInfo {
        pub ThreadId: u32,
        pub DumpFlags: u32,
        pub DumpError: u32,
        pub ExitStatus: u32,
        pub CreateTime: u64,
        pub ExitTime: u64,
        pub KernelTime: u64,
        pub UserTime: u64,
        pub StartAddress: u64,
        pub Affinity: u64,
    }

    #[repr(u32)]
    pub enum DkmVolatileThreadFlags {

        None = 0x0,
        UserModeScheduled = 0x1,
    }

} // end of mod ThreadProperties

pub mod ParallelTasks {

    #[repr(C)]
    struct NativeDkmJsAsyncStackFrame {

        BaseClass: crate::NativeXapiDispatcherObjectBase,
        pub DocumentId: u64,
        pub SourceLocationStartIndex: u32,
        pub SourceLocationLength: u32,
        pub Name: *mut std::ffi::c_void,
    }

    #[repr(C)]
    pub struct DkmManagedTaskInfo {
        pub Id: u32,
        pub ParentId: u32,
        pub AsyncState: *mut std::ffi::c_void,
        pub StateFlags: u32,
    }

    #[repr(C)]
    struct NativeDkmTask____ExtendedData {

        pub ReturnStatus: crate::ParallelTasks::DkmTaskReturnStatus,
        pub StartTime: f64,
        pub CompletedTime: f64,
        pub Duration: f64,
        pub LocationFrame: *mut std::ffi::c_void,
        pub ContinuationFrames: *mut std::ffi::c_void,
    }

    #[repr(C)]
    struct NativeDkmTask {

        BaseClass: crate::NativeXapiDataContainer,
        pub TaskProvider: *mut std::ffi::c_void,
        pub Thread: *mut std::ffi::c_void,
        pub TaskId: u64,
        pub ParentTaskId: u64,
        pub StackSegment: crate::ParallelTasks::DkmTaskStackSegment,
        ExtendedData: *const std::ffi::c_void,
    }

    #[repr(C)]
    pub struct DkmTaskProperties {
        pub Name: *mut std::ffi::c_void,
        pub Location: *mut std::ffi::c_void,
        pub Property1: *mut std::ffi::c_void,
        pub Property2: *mut std::ffi::c_void,
        pub Property3: *mut std::ffi::c_void,
        pub State: u32,
        pub Flags: u32,
        pub Fields: u32,
    }

    #[repr(C)]
    struct NativeDkmTaskProvider____ExtendedData {

        pub AdditionalCapabilities: crate::ParallelTasks::DkmTaskProviderCapabilityFlags,
    }

    #[repr(C)]
    struct NativeDkmTaskProvider {

        BaseClass: crate::NativeXapiDataContainer,
        pub TaskProviderId: crate::GUID,
        pub Name: *mut std::ffi::c_void,
        pub UniqueId: crate::GUID,
        pub RuntimeInstance: *mut std::ffi::c_void,
        ExtendedData: *const std::ffi::c_void,
    }

    #[repr(u32)]
    pub enum DkmTaskProviderCapabilityFlags {

        None = 0x0,
        Timestamps = 0x1,
        ReturnStatus = 0x2,
    }

    #[repr(C)]
    struct NativeDkmTaskProviderOperationContext {

        BaseClass: crate::NativeXapiDataContainer,
        pub TaskProvider: *mut std::ffi::c_void,
        pub UniqueId: crate::GUID,
        pub SourceId: crate::GUID,
    }

    #[repr(u32)]
    pub enum DkmTaskReturnStatus {

        Unknown = 0,
        Success = 1,
        Error = 2,
        Cancelled = 3,
    }

    #[repr(C)]
    pub struct DkmTaskStackSegment {
        pub AddressMin: u64,
        pub AddressMax: u64,
        pub AddressOriginalMin: u64,
        pub AddressOriginalMax: u64,
        pub ThreadId: u32,
    }

    #[repr(C)]
    struct NativeDkmTaskSynchronizationObject____ExtendedData {

        pub OwningTaskId: u32,
    }

    #[repr(C)]
    struct NativeDkmTaskSynchronizationObject {

        BaseClass: crate::NativeXapiDataContainer,
        pub Task: *mut std::ffi::c_void,
        pub OwningThread: *mut std::ffi::c_void,
        pub UniqueId: crate::GUID,
        pub DecimalName: *mut std::ffi::c_void,
        pub HexidecimalName: *mut std::ffi::c_void,
        pub Type: *mut std::ffi::c_void,
        pub WaitTime: u32,
        pub Timeout: u32,
        ExtendedData: *const std::ffi::c_void,
    }

} // end of mod ParallelTasks

pub mod Enc {

    #[repr(u32)]
    pub enum DkmNativeEncNotify {

        CompileStart = 0,
        CompileEnd = 1,
    }

} // end of mod Enc

pub mod Internal {

    #[repr(C)]
    struct NativeDkmEELocalObject {

        BaseClass: crate::NativeXapiDataContainer,
        pub UniqueId: crate::GUID,
        pub Process: *mut std::ffi::c_void,
    }

    #[repr(C)]
    struct NativeDkmPropertyProxy {

        BaseClass: crate::NativeXapiDataContainer,
        pub Id: u32,
        pub EvaluationResult: *mut std::ffi::c_void,
        pub UniqueId: crate::GUID,
    }

} // end of mod Internal

pub mod Telemetry {

    #[repr(C)]
    struct NativeDkmNameValuePair {

        BaseClass: crate::NativeXapiDispatcherObjectBase,
        pub Name: *mut std::ffi::c_void,
        pub Value: *mut std::ffi::c_void,
    }

    #[repr(C)]
    struct NativeDkmTelemetryEvent {

        BaseClass: crate::NativeXapiDispatcherObjectBase,
        pub EventName: *mut std::ffi::c_void,
        pub Properties: *mut std::ffi::c_void,
        pub Process: *mut std::ffi::c_void,
    }

} // end of mod Telemetry

pub mod TargetCompositionServices {

    #[repr(u32)]
    pub enum DkmTargetCompositionScenario {

        PEDwarf = 0,
        ELF = 1,
        CoreDMP = 2,
    }

} // end of mod TargetCompositionServices

pub mod OpenEnclave {

    #[repr(u32)]
    pub enum DkmOpenEnclaveTransitionType {

        None = 0x0,
        CallIn = 0x1,
        CallOut = 0x2,
    }

} // end of mod OpenEnclave

pub mod DiagnosticAnalysis {

} // end of mod DiagnosticAnalysis

pub mod Decompilation {

} // end of mod Decompilation

